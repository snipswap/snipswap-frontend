"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.BlockMetadata = exports.StoreKVPair = exports.protobufPackage = void 0;
/* eslint-disable */
const types_1 = require("../../../tendermint/abci/types");
const binary_1 = require("../../../binary");
const helpers_1 = require("../../../helpers");
exports.protobufPackage = "cosmos.store.v1beta1";
function createBaseStoreKVPair() {
    return {
        storeKey: "",
        delete: false,
        key: new Uint8Array(),
        value: new Uint8Array(),
    };
}
exports.StoreKVPair = {
    typeUrl: "/cosmos.store.v1beta1.StoreKVPair",
    encode(message, writer = binary_1.BinaryWriter.create()) {
        if (message.storeKey !== "") {
            writer.uint32(10).string(message.storeKey);
        }
        if (message.delete === true) {
            writer.uint32(16).bool(message.delete);
        }
        if (message.key.length !== 0) {
            writer.uint32(26).bytes(message.key);
        }
        if (message.value.length !== 0) {
            writer.uint32(34).bytes(message.value);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof binary_1.BinaryReader ? input : new binary_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseStoreKVPair();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.storeKey = reader.string();
                    break;
                case 2:
                    message.delete = reader.bool();
                    break;
                case 3:
                    message.key = reader.bytes();
                    break;
                case 4:
                    message.value = reader.bytes();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        const obj = createBaseStoreKVPair();
        if ((0, helpers_1.isSet)(object.storeKey))
            obj.storeKey = String(object.storeKey);
        if ((0, helpers_1.isSet)(object.delete))
            obj.delete = Boolean(object.delete);
        if ((0, helpers_1.isSet)(object.key))
            obj.key = (0, helpers_1.bytesFromBase64)(object.key);
        if ((0, helpers_1.isSet)(object.value))
            obj.value = (0, helpers_1.bytesFromBase64)(object.value);
        return obj;
    },
    toJSON(message) {
        const obj = {};
        message.storeKey !== undefined && (obj.storeKey = message.storeKey);
        message.delete !== undefined && (obj.delete = message.delete);
        message.key !== undefined &&
            (obj.key = (0, helpers_1.base64FromBytes)(message.key !== undefined ? message.key : new Uint8Array()));
        message.value !== undefined &&
            (obj.value = (0, helpers_1.base64FromBytes)(message.value !== undefined ? message.value : new Uint8Array()));
        return obj;
    },
    fromPartial(object) {
        const message = createBaseStoreKVPair();
        message.storeKey = object.storeKey ?? "";
        message.delete = object.delete ?? false;
        message.key = object.key ?? new Uint8Array();
        message.value = object.value ?? new Uint8Array();
        return message;
    },
};
function createBaseBlockMetadata() {
    return {
        responseCommit: undefined,
        requestFinalizeBlock: undefined,
        responseFinalizeBlock: undefined,
    };
}
exports.BlockMetadata = {
    typeUrl: "/cosmos.store.v1beta1.BlockMetadata",
    encode(message, writer = binary_1.BinaryWriter.create()) {
        if (message.responseCommit !== undefined) {
            types_1.ResponseCommit.encode(message.responseCommit, writer.uint32(50).fork()).ldelim();
        }
        if (message.requestFinalizeBlock !== undefined) {
            types_1.RequestFinalizeBlock.encode(message.requestFinalizeBlock, writer.uint32(58).fork()).ldelim();
        }
        if (message.responseFinalizeBlock !== undefined) {
            types_1.ResponseFinalizeBlock.encode(message.responseFinalizeBlock, writer.uint32(66).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof binary_1.BinaryReader ? input : new binary_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseBlockMetadata();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 6:
                    message.responseCommit = types_1.ResponseCommit.decode(reader, reader.uint32());
                    break;
                case 7:
                    message.requestFinalizeBlock = types_1.RequestFinalizeBlock.decode(reader, reader.uint32());
                    break;
                case 8:
                    message.responseFinalizeBlock = types_1.ResponseFinalizeBlock.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        const obj = createBaseBlockMetadata();
        if ((0, helpers_1.isSet)(object.responseCommit))
            obj.responseCommit = types_1.ResponseCommit.fromJSON(object.responseCommit);
        if ((0, helpers_1.isSet)(object.requestFinalizeBlock))
            obj.requestFinalizeBlock = types_1.RequestFinalizeBlock.fromJSON(object.requestFinalizeBlock);
        if ((0, helpers_1.isSet)(object.responseFinalizeBlock))
            obj.responseFinalizeBlock = types_1.ResponseFinalizeBlock.fromJSON(object.responseFinalizeBlock);
        return obj;
    },
    toJSON(message) {
        const obj = {};
        message.responseCommit !== undefined &&
            (obj.responseCommit = message.responseCommit
                ? types_1.ResponseCommit.toJSON(message.responseCommit)
                : undefined);
        message.requestFinalizeBlock !== undefined &&
            (obj.requestFinalizeBlock = message.requestFinalizeBlock
                ? types_1.RequestFinalizeBlock.toJSON(message.requestFinalizeBlock)
                : undefined);
        message.responseFinalizeBlock !== undefined &&
            (obj.responseFinalizeBlock = message.responseFinalizeBlock
                ? types_1.ResponseFinalizeBlock.toJSON(message.responseFinalizeBlock)
                : undefined);
        return obj;
    },
    fromPartial(object) {
        const message = createBaseBlockMetadata();
        if (object.responseCommit !== undefined && object.responseCommit !== null) {
            message.responseCommit = types_1.ResponseCommit.fromPartial(object.responseCommit);
        }
        if (object.requestFinalizeBlock !== undefined && object.requestFinalizeBlock !== null) {
            message.requestFinalizeBlock = types_1.RequestFinalizeBlock.fromPartial(object.requestFinalizeBlock);
        }
        if (object.responseFinalizeBlock !== undefined && object.responseFinalizeBlock !== null) {
            message.responseFinalizeBlock = types_1.ResponseFinalizeBlock.fromPartial(object.responseFinalizeBlock);
        }
        return message;
    },
};
//# sourceMappingURL=listening.js.map