"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ListenCommitResponse = exports.ListenCommitRequest = exports.ListenFinalizeBlockResponse = exports.ListenFinalizeBlockRequest = exports.protobufPackage = void 0;
/* eslint-disable */
const types_1 = require("../../../../tendermint/abci/types");
const listening_1 = require("../../v1beta1/listening");
const binary_1 = require("../../../../binary");
const helpers_1 = require("../../../../helpers");
exports.protobufPackage = "cosmos.store.streaming.abci";
function createBaseListenFinalizeBlockRequest() {
    return {
        req: undefined,
        res: undefined,
    };
}
exports.ListenFinalizeBlockRequest = {
    typeUrl: "/cosmos.store.streaming.abci.ListenFinalizeBlockRequest",
    encode(message, writer = binary_1.BinaryWriter.create()) {
        if (message.req !== undefined) {
            types_1.RequestFinalizeBlock.encode(message.req, writer.uint32(10).fork()).ldelim();
        }
        if (message.res !== undefined) {
            types_1.ResponseFinalizeBlock.encode(message.res, writer.uint32(18).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof binary_1.BinaryReader ? input : new binary_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseListenFinalizeBlockRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.req = types_1.RequestFinalizeBlock.decode(reader, reader.uint32());
                    break;
                case 2:
                    message.res = types_1.ResponseFinalizeBlock.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        const obj = createBaseListenFinalizeBlockRequest();
        if ((0, helpers_1.isSet)(object.req))
            obj.req = types_1.RequestFinalizeBlock.fromJSON(object.req);
        if ((0, helpers_1.isSet)(object.res))
            obj.res = types_1.ResponseFinalizeBlock.fromJSON(object.res);
        return obj;
    },
    toJSON(message) {
        const obj = {};
        message.req !== undefined &&
            (obj.req = message.req ? types_1.RequestFinalizeBlock.toJSON(message.req) : undefined);
        message.res !== undefined &&
            (obj.res = message.res ? types_1.ResponseFinalizeBlock.toJSON(message.res) : undefined);
        return obj;
    },
    fromPartial(object) {
        const message = createBaseListenFinalizeBlockRequest();
        if (object.req !== undefined && object.req !== null) {
            message.req = types_1.RequestFinalizeBlock.fromPartial(object.req);
        }
        if (object.res !== undefined && object.res !== null) {
            message.res = types_1.ResponseFinalizeBlock.fromPartial(object.res);
        }
        return message;
    },
};
function createBaseListenFinalizeBlockResponse() {
    return {};
}
exports.ListenFinalizeBlockResponse = {
    typeUrl: "/cosmos.store.streaming.abci.ListenFinalizeBlockResponse",
    encode(_, writer = binary_1.BinaryWriter.create()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof binary_1.BinaryReader ? input : new binary_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseListenFinalizeBlockResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(_) {
        const obj = createBaseListenFinalizeBlockResponse();
        return obj;
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    fromPartial(_) {
        const message = createBaseListenFinalizeBlockResponse();
        return message;
    },
};
function createBaseListenCommitRequest() {
    return {
        blockHeight: BigInt(0),
        res: undefined,
        changeSet: [],
    };
}
exports.ListenCommitRequest = {
    typeUrl: "/cosmos.store.streaming.abci.ListenCommitRequest",
    encode(message, writer = binary_1.BinaryWriter.create()) {
        if (message.blockHeight !== BigInt(0)) {
            writer.uint32(8).int64(message.blockHeight);
        }
        if (message.res !== undefined) {
            types_1.ResponseCommit.encode(message.res, writer.uint32(18).fork()).ldelim();
        }
        for (const v of message.changeSet) {
            listening_1.StoreKVPair.encode(v, writer.uint32(26).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof binary_1.BinaryReader ? input : new binary_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseListenCommitRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.blockHeight = reader.int64();
                    break;
                case 2:
                    message.res = types_1.ResponseCommit.decode(reader, reader.uint32());
                    break;
                case 3:
                    message.changeSet.push(listening_1.StoreKVPair.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        const obj = createBaseListenCommitRequest();
        if ((0, helpers_1.isSet)(object.blockHeight))
            obj.blockHeight = BigInt(object.blockHeight.toString());
        if ((0, helpers_1.isSet)(object.res))
            obj.res = types_1.ResponseCommit.fromJSON(object.res);
        if (Array.isArray(object?.changeSet))
            obj.changeSet = object.changeSet.map((e) => listening_1.StoreKVPair.fromJSON(e));
        return obj;
    },
    toJSON(message) {
        const obj = {};
        message.blockHeight !== undefined && (obj.blockHeight = (message.blockHeight || BigInt(0)).toString());
        message.res !== undefined && (obj.res = message.res ? types_1.ResponseCommit.toJSON(message.res) : undefined);
        if (message.changeSet) {
            obj.changeSet = message.changeSet.map((e) => (e ? listening_1.StoreKVPair.toJSON(e) : undefined));
        }
        else {
            obj.changeSet = [];
        }
        return obj;
    },
    fromPartial(object) {
        const message = createBaseListenCommitRequest();
        if (object.blockHeight !== undefined && object.blockHeight !== null) {
            message.blockHeight = BigInt(object.blockHeight.toString());
        }
        if (object.res !== undefined && object.res !== null) {
            message.res = types_1.ResponseCommit.fromPartial(object.res);
        }
        message.changeSet = object.changeSet?.map((e) => listening_1.StoreKVPair.fromPartial(e)) || [];
        return message;
    },
};
function createBaseListenCommitResponse() {
    return {};
}
exports.ListenCommitResponse = {
    typeUrl: "/cosmos.store.streaming.abci.ListenCommitResponse",
    encode(_, writer = binary_1.BinaryWriter.create()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof binary_1.BinaryReader ? input : new binary_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseListenCommitResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(_) {
        const obj = createBaseListenCommitResponse();
        return obj;
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    fromPartial(_) {
        const message = createBaseListenCommitResponse();
        return message;
    },
};
//# sourceMappingURL=grpc.js.map