import { Permissions } from "./types";
import { BinaryReader, BinaryWriter } from "../../../binary";
import { Rpc } from "../../../helpers";
import { JsonSafe } from "../../../json-safe";
export declare const protobufPackage = "cosmos.circuit.v1";
/** MsgAuthorizeCircuitBreaker defines the Msg/AuthorizeCircuitBreaker request type. */
export interface MsgAuthorizeCircuitBreaker {
    /**
     * granter is the granter of the circuit breaker permissions and must have
     * LEVEL_SUPER_ADMIN.
     */
    granter: string;
    /** grantee is the account authorized with the provided permissions. */
    grantee: string;
    /**
     * permissions are the circuit breaker permissions that the grantee receives.
     * These will overwrite any existing permissions. LEVEL_NONE_UNSPECIFIED can
     * be specified to revoke all permissions.
     */
    permissions?: Permissions;
}
/** MsgAuthorizeCircuitBreakerResponse defines the Msg/AuthorizeCircuitBreaker response type. */
export interface MsgAuthorizeCircuitBreakerResponse {
    success: boolean;
}
/** MsgTripCircuitBreaker defines the Msg/TripCircuitBreaker request type. */
export interface MsgTripCircuitBreaker {
    /** authority is the account authorized to trip the circuit breaker. */
    authority: string;
    /**
     * msg_type_urls specifies a list of type URLs to immediately stop processing.
     * IF IT IS LEFT EMPTY, ALL MSG PROCESSING WILL STOP IMMEDIATELY.
     * This value is validated against the authority's permissions and if the
     * authority does not have permissions to trip the specified msg type URLs
     * (or all URLs), the operation will fail.
     */
    msgTypeUrls: string[];
}
/** MsgTripCircuitBreakerResponse defines the Msg/TripCircuitBreaker response type. */
export interface MsgTripCircuitBreakerResponse {
    success: boolean;
}
/** MsgResetCircuitBreaker defines the Msg/ResetCircuitBreaker request type. */
export interface MsgResetCircuitBreaker {
    /** authority is the account authorized to trip or reset the circuit breaker. */
    authority: string;
    /**
     * msg_type_urls specifies a list of Msg type URLs to resume processing. If
     * it is left empty all Msg processing for type URLs that the account is
     * authorized to trip will resume.
     */
    msgTypeUrls: string[];
}
/** MsgResetCircuitBreakerResponse defines the Msg/ResetCircuitBreaker response type. */
export interface MsgResetCircuitBreakerResponse {
    success: boolean;
}
export declare const MsgAuthorizeCircuitBreaker: {
    typeUrl: string;
    encode(message: MsgAuthorizeCircuitBreaker, writer?: BinaryWriter): BinaryWriter;
    decode(input: BinaryReader | Uint8Array, length?: number): MsgAuthorizeCircuitBreaker;
    fromJSON(object: any): MsgAuthorizeCircuitBreaker;
    toJSON(message: MsgAuthorizeCircuitBreaker): JsonSafe<MsgAuthorizeCircuitBreaker>;
    fromPartial<I extends {
        granter?: string | undefined;
        grantee?: string | undefined;
        permissions?: {
            level?: import("./types").Permissions_Level | undefined;
            limitTypeUrls?: string[] | undefined;
        } | undefined;
    } & {
        granter?: string | undefined;
        grantee?: string | undefined;
        permissions?: ({
            level?: import("./types").Permissions_Level | undefined;
            limitTypeUrls?: string[] | undefined;
        } & {
            level?: import("./types").Permissions_Level | undefined;
            limitTypeUrls?: (string[] & string[] & Record<Exclude<keyof I["permissions"]["limitTypeUrls"], keyof string[]>, never>) | undefined;
        } & Record<Exclude<keyof I["permissions"], keyof Permissions>, never>) | undefined;
    } & Record<Exclude<keyof I, keyof MsgAuthorizeCircuitBreaker>, never>>(object: I): MsgAuthorizeCircuitBreaker;
};
export declare const MsgAuthorizeCircuitBreakerResponse: {
    typeUrl: string;
    encode(message: MsgAuthorizeCircuitBreakerResponse, writer?: BinaryWriter): BinaryWriter;
    decode(input: BinaryReader | Uint8Array, length?: number): MsgAuthorizeCircuitBreakerResponse;
    fromJSON(object: any): MsgAuthorizeCircuitBreakerResponse;
    toJSON(message: MsgAuthorizeCircuitBreakerResponse): JsonSafe<MsgAuthorizeCircuitBreakerResponse>;
    fromPartial<I extends {
        success?: boolean | undefined;
    } & {
        success?: boolean | undefined;
    } & Record<Exclude<keyof I, "success">, never>>(object: I): MsgAuthorizeCircuitBreakerResponse;
};
export declare const MsgTripCircuitBreaker: {
    typeUrl: string;
    encode(message: MsgTripCircuitBreaker, writer?: BinaryWriter): BinaryWriter;
    decode(input: BinaryReader | Uint8Array, length?: number): MsgTripCircuitBreaker;
    fromJSON(object: any): MsgTripCircuitBreaker;
    toJSON(message: MsgTripCircuitBreaker): JsonSafe<MsgTripCircuitBreaker>;
    fromPartial<I extends {
        authority?: string | undefined;
        msgTypeUrls?: string[] | undefined;
    } & {
        authority?: string | undefined;
        msgTypeUrls?: (string[] & string[] & Record<Exclude<keyof I["msgTypeUrls"], keyof string[]>, never>) | undefined;
    } & Record<Exclude<keyof I, keyof MsgTripCircuitBreaker>, never>>(object: I): MsgTripCircuitBreaker;
};
export declare const MsgTripCircuitBreakerResponse: {
    typeUrl: string;
    encode(message: MsgTripCircuitBreakerResponse, writer?: BinaryWriter): BinaryWriter;
    decode(input: BinaryReader | Uint8Array, length?: number): MsgTripCircuitBreakerResponse;
    fromJSON(object: any): MsgTripCircuitBreakerResponse;
    toJSON(message: MsgTripCircuitBreakerResponse): JsonSafe<MsgTripCircuitBreakerResponse>;
    fromPartial<I extends {
        success?: boolean | undefined;
    } & {
        success?: boolean | undefined;
    } & Record<Exclude<keyof I, "success">, never>>(object: I): MsgTripCircuitBreakerResponse;
};
export declare const MsgResetCircuitBreaker: {
    typeUrl: string;
    encode(message: MsgResetCircuitBreaker, writer?: BinaryWriter): BinaryWriter;
    decode(input: BinaryReader | Uint8Array, length?: number): MsgResetCircuitBreaker;
    fromJSON(object: any): MsgResetCircuitBreaker;
    toJSON(message: MsgResetCircuitBreaker): JsonSafe<MsgResetCircuitBreaker>;
    fromPartial<I extends {
        authority?: string | undefined;
        msgTypeUrls?: string[] | undefined;
    } & {
        authority?: string | undefined;
        msgTypeUrls?: (string[] & string[] & Record<Exclude<keyof I["msgTypeUrls"], keyof string[]>, never>) | undefined;
    } & Record<Exclude<keyof I, keyof MsgResetCircuitBreaker>, never>>(object: I): MsgResetCircuitBreaker;
};
export declare const MsgResetCircuitBreakerResponse: {
    typeUrl: string;
    encode(message: MsgResetCircuitBreakerResponse, writer?: BinaryWriter): BinaryWriter;
    decode(input: BinaryReader | Uint8Array, length?: number): MsgResetCircuitBreakerResponse;
    fromJSON(object: any): MsgResetCircuitBreakerResponse;
    toJSON(message: MsgResetCircuitBreakerResponse): JsonSafe<MsgResetCircuitBreakerResponse>;
    fromPartial<I extends {
        success?: boolean | undefined;
    } & {
        success?: boolean | undefined;
    } & Record<Exclude<keyof I, "success">, never>>(object: I): MsgResetCircuitBreakerResponse;
};
/** Msg defines the circuit Msg service. */
export interface Msg {
    /**
     * AuthorizeCircuitBreaker allows a super-admin to grant (or revoke) another
     * account's circuit breaker permissions.
     */
    AuthorizeCircuitBreaker(request: MsgAuthorizeCircuitBreaker): Promise<MsgAuthorizeCircuitBreakerResponse>;
    /** TripCircuitBreaker pauses processing of Msg's in the state machine. */
    TripCircuitBreaker(request: MsgTripCircuitBreaker): Promise<MsgTripCircuitBreakerResponse>;
    /**
     * ResetCircuitBreaker resumes processing of Msg's in the state machine that
     * have been been paused using TripCircuitBreaker.
     */
    ResetCircuitBreaker(request: MsgResetCircuitBreaker): Promise<MsgResetCircuitBreakerResponse>;
}
export declare class MsgClientImpl implements Msg {
    private readonly rpc;
    constructor(rpc: Rpc);
    AuthorizeCircuitBreaker(request: MsgAuthorizeCircuitBreaker): Promise<MsgAuthorizeCircuitBreakerResponse>;
    TripCircuitBreaker(request: MsgTripCircuitBreaker): Promise<MsgTripCircuitBreakerResponse>;
    ResetCircuitBreaker(request: MsgResetCircuitBreaker): Promise<MsgResetCircuitBreakerResponse>;
}
