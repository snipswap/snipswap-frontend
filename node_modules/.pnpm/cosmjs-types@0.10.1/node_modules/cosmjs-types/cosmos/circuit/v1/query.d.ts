import { PageRequest, PageResponse } from "../../base/query/v1beta1/pagination";
import { Permissions, GenesisAccountPermissions } from "./types";
import { BinaryReader, BinaryWriter } from "../../../binary";
import { Rpc } from "../../../helpers";
import { JsonSafe } from "../../../json-safe";
export declare const protobufPackage = "cosmos.circuit.v1";
/** QueryAccountRequest is the request type for the Query/Account RPC method. */
export interface QueryAccountRequest {
    address: string;
}
/** AccountResponse is the response type for the Query/Account RPC method. */
export interface AccountResponse {
    permission?: Permissions;
}
/** QueryAccountsRequest is the request type for the Query/Accounts RPC method. */
export interface QueryAccountsRequest {
    /** pagination defines an optional pagination for the request. */
    pagination?: PageRequest;
}
/** AccountsResponse is the response type for the Query/Accounts RPC method. */
export interface AccountsResponse {
    accounts: GenesisAccountPermissions[];
    /** pagination defines the pagination in the response. */
    pagination?: PageResponse;
}
/** QueryDisableListRequest is the request type for the Query/DisabledList RPC method. */
export interface QueryDisabledListRequest {
}
/** DisabledListResponse is the response type for the Query/DisabledList RPC method. */
export interface DisabledListResponse {
    disabledList: string[];
}
export declare const QueryAccountRequest: {
    typeUrl: string;
    encode(message: QueryAccountRequest, writer?: BinaryWriter): BinaryWriter;
    decode(input: BinaryReader | Uint8Array, length?: number): QueryAccountRequest;
    fromJSON(object: any): QueryAccountRequest;
    toJSON(message: QueryAccountRequest): JsonSafe<QueryAccountRequest>;
    fromPartial<I extends {
        address?: string | undefined;
    } & {
        address?: string | undefined;
    } & Record<Exclude<keyof I, "address">, never>>(object: I): QueryAccountRequest;
};
export declare const AccountResponse: {
    typeUrl: string;
    encode(message: AccountResponse, writer?: BinaryWriter): BinaryWriter;
    decode(input: BinaryReader | Uint8Array, length?: number): AccountResponse;
    fromJSON(object: any): AccountResponse;
    toJSON(message: AccountResponse): JsonSafe<AccountResponse>;
    fromPartial<I extends {
        permission?: {
            level?: import("./types").Permissions_Level | undefined;
            limitTypeUrls?: string[] | undefined;
        } | undefined;
    } & {
        permission?: ({
            level?: import("./types").Permissions_Level | undefined;
            limitTypeUrls?: string[] | undefined;
        } & {
            level?: import("./types").Permissions_Level | undefined;
            limitTypeUrls?: (string[] & string[] & Record<Exclude<keyof I["permission"]["limitTypeUrls"], keyof string[]>, never>) | undefined;
        } & Record<Exclude<keyof I["permission"], keyof Permissions>, never>) | undefined;
    } & Record<Exclude<keyof I, "permission">, never>>(object: I): AccountResponse;
};
export declare const QueryAccountsRequest: {
    typeUrl: string;
    encode(message: QueryAccountsRequest, writer?: BinaryWriter): BinaryWriter;
    decode(input: BinaryReader | Uint8Array, length?: number): QueryAccountsRequest;
    fromJSON(object: any): QueryAccountsRequest;
    toJSON(message: QueryAccountsRequest): JsonSafe<QueryAccountsRequest>;
    fromPartial<I extends {
        pagination?: {
            key?: Uint8Array | undefined;
            offset?: bigint | undefined;
            limit?: bigint | undefined;
            countTotal?: boolean | undefined;
            reverse?: boolean | undefined;
        } | undefined;
    } & {
        pagination?: ({
            key?: Uint8Array | undefined;
            offset?: bigint | undefined;
            limit?: bigint | undefined;
            countTotal?: boolean | undefined;
            reverse?: boolean | undefined;
        } & {
            key?: Uint8Array | undefined;
            offset?: bigint | undefined;
            limit?: bigint | undefined;
            countTotal?: boolean | undefined;
            reverse?: boolean | undefined;
        } & Record<Exclude<keyof I["pagination"], keyof PageRequest>, never>) | undefined;
    } & Record<Exclude<keyof I, "pagination">, never>>(object: I): QueryAccountsRequest;
};
export declare const AccountsResponse: {
    typeUrl: string;
    encode(message: AccountsResponse, writer?: BinaryWriter): BinaryWriter;
    decode(input: BinaryReader | Uint8Array, length?: number): AccountsResponse;
    fromJSON(object: any): AccountsResponse;
    toJSON(message: AccountsResponse): JsonSafe<AccountsResponse>;
    fromPartial<I extends {
        accounts?: {
            address?: string | undefined;
            permissions?: {
                level?: import("./types").Permissions_Level | undefined;
                limitTypeUrls?: string[] | undefined;
            } | undefined;
        }[] | undefined;
        pagination?: {
            nextKey?: Uint8Array | undefined;
            total?: bigint | undefined;
        } | undefined;
    } & {
        accounts?: ({
            address?: string | undefined;
            permissions?: {
                level?: import("./types").Permissions_Level | undefined;
                limitTypeUrls?: string[] | undefined;
            } | undefined;
        }[] & ({
            address?: string | undefined;
            permissions?: {
                level?: import("./types").Permissions_Level | undefined;
                limitTypeUrls?: string[] | undefined;
            } | undefined;
        } & {
            address?: string | undefined;
            permissions?: ({
                level?: import("./types").Permissions_Level | undefined;
                limitTypeUrls?: string[] | undefined;
            } & {
                level?: import("./types").Permissions_Level | undefined;
                limitTypeUrls?: (string[] & string[] & Record<Exclude<keyof I["accounts"][number]["permissions"]["limitTypeUrls"], keyof string[]>, never>) | undefined;
            } & Record<Exclude<keyof I["accounts"][number]["permissions"], keyof Permissions>, never>) | undefined;
        } & Record<Exclude<keyof I["accounts"][number], keyof GenesisAccountPermissions>, never>)[] & Record<Exclude<keyof I["accounts"], keyof {
            address?: string | undefined;
            permissions?: {
                level?: import("./types").Permissions_Level | undefined;
                limitTypeUrls?: string[] | undefined;
            } | undefined;
        }[]>, never>) | undefined;
        pagination?: ({
            nextKey?: Uint8Array | undefined;
            total?: bigint | undefined;
        } & {
            nextKey?: Uint8Array | undefined;
            total?: bigint | undefined;
        } & Record<Exclude<keyof I["pagination"], keyof PageResponse>, never>) | undefined;
    } & Record<Exclude<keyof I, keyof AccountsResponse>, never>>(object: I): AccountsResponse;
};
export declare const QueryDisabledListRequest: {
    typeUrl: string;
    encode(_: QueryDisabledListRequest, writer?: BinaryWriter): BinaryWriter;
    decode(input: BinaryReader | Uint8Array, length?: number): QueryDisabledListRequest;
    fromJSON(_: any): QueryDisabledListRequest;
    toJSON(_: QueryDisabledListRequest): JsonSafe<QueryDisabledListRequest>;
    fromPartial<I extends {} & {} & Record<Exclude<keyof I, never>, never>>(_: I): QueryDisabledListRequest;
};
export declare const DisabledListResponse: {
    typeUrl: string;
    encode(message: DisabledListResponse, writer?: BinaryWriter): BinaryWriter;
    decode(input: BinaryReader | Uint8Array, length?: number): DisabledListResponse;
    fromJSON(object: any): DisabledListResponse;
    toJSON(message: DisabledListResponse): JsonSafe<DisabledListResponse>;
    fromPartial<I extends {
        disabledList?: string[] | undefined;
    } & {
        disabledList?: (string[] & string[] & Record<Exclude<keyof I["disabledList"], keyof string[]>, never>) | undefined;
    } & Record<Exclude<keyof I, "disabledList">, never>>(object: I): DisabledListResponse;
};
/** Query defines the circuit gRPC querier service. */
export interface Query {
    /** Account returns account permissions. */
    Account(request: QueryAccountRequest): Promise<AccountResponse>;
    /** Account returns account permissions. */
    Accounts(request?: QueryAccountsRequest): Promise<AccountsResponse>;
    /** DisabledList returns a list of disabled message urls */
    DisabledList(request?: QueryDisabledListRequest): Promise<DisabledListResponse>;
}
export declare class QueryClientImpl implements Query {
    private readonly rpc;
    constructor(rpc: Rpc);
    Account(request: QueryAccountRequest): Promise<AccountResponse>;
    Accounts(request?: QueryAccountsRequest): Promise<AccountsResponse>;
    DisabledList(request?: QueryDisabledListRequest): Promise<DisabledListResponse>;
}
