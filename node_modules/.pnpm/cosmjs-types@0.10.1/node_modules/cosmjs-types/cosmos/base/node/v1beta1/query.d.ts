import { Timestamp } from "../../../../google/protobuf/timestamp";
import { BinaryReader, BinaryWriter } from "../../../../binary";
import { JsonSafe } from "../../../../json-safe";
import { Rpc } from "../../../../helpers";
export declare const protobufPackage = "cosmos.base.node.v1beta1";
/** ConfigRequest defines the request structure for the Config gRPC query. */
export interface ConfigRequest {
}
/** ConfigResponse defines the response structure for the Config gRPC query. */
export interface ConfigResponse {
    minimumGasPrice: string;
    pruningKeepRecent: string;
    pruningInterval: string;
    haltHeight: bigint;
}
/** StateRequest defines the request structure for the status of a node. */
export interface StatusRequest {
}
/** StateResponse defines the response structure for the status of a node. */
export interface StatusResponse {
    /** earliest block height available in the store */
    earliestStoreHeight: bigint;
    /** current block height */
    height: bigint;
    /** block height timestamp */
    timestamp?: Timestamp;
    /** app hash of the current block */
    appHash: Uint8Array;
    /** validator hash provided by the consensus header */
    validatorHash: Uint8Array;
}
export declare const ConfigRequest: {
    typeUrl: string;
    encode(_: ConfigRequest, writer?: BinaryWriter): BinaryWriter;
    decode(input: BinaryReader | Uint8Array, length?: number): ConfigRequest;
    fromJSON(_: any): ConfigRequest;
    toJSON(_: ConfigRequest): JsonSafe<ConfigRequest>;
    fromPartial<I extends {} & {} & Record<Exclude<keyof I, never>, never>>(_: I): ConfigRequest;
};
export declare const ConfigResponse: {
    typeUrl: string;
    encode(message: ConfigResponse, writer?: BinaryWriter): BinaryWriter;
    decode(input: BinaryReader | Uint8Array, length?: number): ConfigResponse;
    fromJSON(object: any): ConfigResponse;
    toJSON(message: ConfigResponse): JsonSafe<ConfigResponse>;
    fromPartial<I extends {
        minimumGasPrice?: string | undefined;
        pruningKeepRecent?: string | undefined;
        pruningInterval?: string | undefined;
        haltHeight?: bigint | undefined;
    } & {
        minimumGasPrice?: string | undefined;
        pruningKeepRecent?: string | undefined;
        pruningInterval?: string | undefined;
        haltHeight?: bigint | undefined;
    } & Record<Exclude<keyof I, keyof ConfigResponse>, never>>(object: I): ConfigResponse;
};
export declare const StatusRequest: {
    typeUrl: string;
    encode(_: StatusRequest, writer?: BinaryWriter): BinaryWriter;
    decode(input: BinaryReader | Uint8Array, length?: number): StatusRequest;
    fromJSON(_: any): StatusRequest;
    toJSON(_: StatusRequest): JsonSafe<StatusRequest>;
    fromPartial<I extends {} & {} & Record<Exclude<keyof I, never>, never>>(_: I): StatusRequest;
};
export declare const StatusResponse: {
    typeUrl: string;
    encode(message: StatusResponse, writer?: BinaryWriter): BinaryWriter;
    decode(input: BinaryReader | Uint8Array, length?: number): StatusResponse;
    fromJSON(object: any): StatusResponse;
    toJSON(message: StatusResponse): JsonSafe<StatusResponse>;
    fromPartial<I extends {
        earliestStoreHeight?: bigint | undefined;
        height?: bigint | undefined;
        timestamp?: {
            seconds?: bigint | undefined;
            nanos?: number | undefined;
        } | undefined;
        appHash?: Uint8Array | undefined;
        validatorHash?: Uint8Array | undefined;
    } & {
        earliestStoreHeight?: bigint | undefined;
        height?: bigint | undefined;
        timestamp?: ({
            seconds?: bigint | undefined;
            nanos?: number | undefined;
        } & {
            seconds?: bigint | undefined;
            nanos?: number | undefined;
        } & Record<Exclude<keyof I["timestamp"], keyof Timestamp>, never>) | undefined;
        appHash?: Uint8Array | undefined;
        validatorHash?: Uint8Array | undefined;
    } & Record<Exclude<keyof I, keyof StatusResponse>, never>>(object: I): StatusResponse;
};
/** Service defines the gRPC querier service for node related queries. */
export interface Service {
    /** Config queries for the operator configuration. */
    Config(request?: ConfigRequest): Promise<ConfigResponse>;
    /** Status queries for the node status. */
    Status(request?: StatusRequest): Promise<StatusResponse>;
}
export declare class ServiceClientImpl implements Service {
    private readonly rpc;
    constructor(rpc: Rpc);
    Config(request?: ConfigRequest): Promise<ConfigResponse>;
    Status(request?: StatusRequest): Promise<StatusResponse>;
}
