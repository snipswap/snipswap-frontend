import { Timestamp } from "../../google/protobuf/timestamp";
import { ConsensusParams } from "../types/params";
import { ProofOps } from "../crypto/proof";
import { PublicKey } from "../crypto/keys";
import { BlockIDFlag } from "../types/validator";
import { BinaryReader, BinaryWriter } from "../../binary";
import { JsonSafe } from "../../json-safe";
export declare const protobufPackage = "tendermint.abci";
export declare enum CheckTxType {
    NEW = 0,
    RECHECK = 1,
    UNRECOGNIZED = -1
}
export declare function checkTxTypeFromJSON(object: any): CheckTxType;
export declare function checkTxTypeToJSON(object: CheckTxType): string;
export declare enum ResponseOfferSnapshot_Result {
    /** UNKNOWN - Unknown result, abort all snapshot restoration */
    UNKNOWN = 0,
    /** ACCEPT - Snapshot accepted, apply chunks */
    ACCEPT = 1,
    /** ABORT - Abort all snapshot restoration */
    ABORT = 2,
    /** REJECT - Reject this specific snapshot, try others */
    REJECT = 3,
    /** REJECT_FORMAT - Reject all snapshots of this format, try others */
    REJECT_FORMAT = 4,
    /** REJECT_SENDER - Reject all snapshots from the sender(s), try others */
    REJECT_SENDER = 5,
    UNRECOGNIZED = -1
}
export declare function responseOfferSnapshot_ResultFromJSON(object: any): ResponseOfferSnapshot_Result;
export declare function responseOfferSnapshot_ResultToJSON(object: ResponseOfferSnapshot_Result): string;
export declare enum ResponseApplySnapshotChunk_Result {
    /** UNKNOWN - Unknown result, abort all snapshot restoration */
    UNKNOWN = 0,
    /** ACCEPT - Chunk successfully accepted */
    ACCEPT = 1,
    /** ABORT - Abort all snapshot restoration */
    ABORT = 2,
    /** RETRY - Retry chunk (combine with refetch and reject) */
    RETRY = 3,
    /** RETRY_SNAPSHOT - Retry snapshot (combine with refetch and reject) */
    RETRY_SNAPSHOT = 4,
    /** REJECT_SNAPSHOT - Reject this snapshot, try others */
    REJECT_SNAPSHOT = 5,
    UNRECOGNIZED = -1
}
export declare function responseApplySnapshotChunk_ResultFromJSON(object: any): ResponseApplySnapshotChunk_Result;
export declare function responseApplySnapshotChunk_ResultToJSON(object: ResponseApplySnapshotChunk_Result): string;
export declare enum ResponseProcessProposal_ProposalStatus {
    UNKNOWN = 0,
    ACCEPT = 1,
    REJECT = 2,
    UNRECOGNIZED = -1
}
export declare function responseProcessProposal_ProposalStatusFromJSON(object: any): ResponseProcessProposal_ProposalStatus;
export declare function responseProcessProposal_ProposalStatusToJSON(object: ResponseProcessProposal_ProposalStatus): string;
export declare enum ResponseVerifyVoteExtension_VerifyStatus {
    UNKNOWN = 0,
    ACCEPT = 1,
    /**
     * REJECT - Rejecting the vote extension will reject the entire precommit by the sender.
     * Incorrectly implementing this thus has liveness implications as it may affect
     * CometBFT's ability to receive 2/3+ valid votes to finalize the block.
     * Honest nodes should never be rejected.
     */
    REJECT = 2,
    UNRECOGNIZED = -1
}
export declare function responseVerifyVoteExtension_VerifyStatusFromJSON(object: any): ResponseVerifyVoteExtension_VerifyStatus;
export declare function responseVerifyVoteExtension_VerifyStatusToJSON(object: ResponseVerifyVoteExtension_VerifyStatus): string;
export declare enum MisbehaviorType {
    UNKNOWN = 0,
    DUPLICATE_VOTE = 1,
    LIGHT_CLIENT_ATTACK = 2,
    UNRECOGNIZED = -1
}
export declare function misbehaviorTypeFromJSON(object: any): MisbehaviorType;
export declare function misbehaviorTypeToJSON(object: MisbehaviorType): string;
export interface Request {
    echo?: RequestEcho;
    flush?: RequestFlush;
    info?: RequestInfo;
    initChain?: RequestInitChain;
    query?: RequestQuery;
    checkTx?: RequestCheckTx;
    commit?: RequestCommit;
    listSnapshots?: RequestListSnapshots;
    offerSnapshot?: RequestOfferSnapshot;
    loadSnapshotChunk?: RequestLoadSnapshotChunk;
    applySnapshotChunk?: RequestApplySnapshotChunk;
    prepareProposal?: RequestPrepareProposal;
    processProposal?: RequestProcessProposal;
    extendVote?: RequestExtendVote;
    verifyVoteExtension?: RequestVerifyVoteExtension;
    finalizeBlock?: RequestFinalizeBlock;
}
export interface RequestEcho {
    message: string;
}
export interface RequestFlush {
}
export interface RequestInfo {
    version: string;
    blockVersion: bigint;
    p2pVersion: bigint;
    abciVersion: string;
}
export interface RequestInitChain {
    time: Timestamp;
    chainId: string;
    consensusParams?: ConsensusParams;
    validators: ValidatorUpdate[];
    appStateBytes: Uint8Array;
    initialHeight: bigint;
}
export interface RequestQuery {
    data: Uint8Array;
    path: string;
    height: bigint;
    prove: boolean;
}
export interface RequestCheckTx {
    tx: Uint8Array;
    type: CheckTxType;
}
export interface RequestCommit {
}
/** lists available snapshots */
export interface RequestListSnapshots {
}
/** offers a snapshot to the application */
export interface RequestOfferSnapshot {
    /** snapshot offered by peers */
    snapshot?: Snapshot;
    /** light client-verified app hash for snapshot height */
    appHash: Uint8Array;
}
/** loads a snapshot chunk */
export interface RequestLoadSnapshotChunk {
    height: bigint;
    format: number;
    chunk: number;
}
/** Applies a snapshot chunk */
export interface RequestApplySnapshotChunk {
    index: number;
    chunk: Uint8Array;
    sender: string;
}
export interface RequestPrepareProposal {
    /** the modified transactions cannot exceed this size. */
    maxTxBytes: bigint;
    /**
     * txs is an array of transactions that will be included in a block,
     * sent to the app for possible modifications.
     */
    txs: Uint8Array[];
    localLastCommit: ExtendedCommitInfo;
    misbehavior: Misbehavior[];
    height: bigint;
    time: Timestamp;
    nextValidatorsHash: Uint8Array;
    /** address of the public key of the validator proposing the block. */
    proposerAddress: Uint8Array;
}
export interface RequestProcessProposal {
    txs: Uint8Array[];
    proposedLastCommit: CommitInfo;
    misbehavior: Misbehavior[];
    /** hash is the merkle root hash of the fields of the proposed block. */
    hash: Uint8Array;
    height: bigint;
    time: Timestamp;
    nextValidatorsHash: Uint8Array;
    /** address of the public key of the original proposer of the block. */
    proposerAddress: Uint8Array;
}
/** Extends a vote with application-injected data */
export interface RequestExtendVote {
    /** the hash of the block that this vote may be referring to */
    hash: Uint8Array;
    /** the height of the extended vote */
    height: bigint;
    /** info of the block that this vote may be referring to */
    time: Timestamp;
    txs: Uint8Array[];
    proposedLastCommit: CommitInfo;
    misbehavior: Misbehavior[];
    nextValidatorsHash: Uint8Array;
    /** address of the public key of the original proposer of the block. */
    proposerAddress: Uint8Array;
}
/** Verify the vote extension */
export interface RequestVerifyVoteExtension {
    /** the hash of the block that this received vote corresponds to */
    hash: Uint8Array;
    /** the validator that signed the vote extension */
    validatorAddress: Uint8Array;
    height: bigint;
    voteExtension: Uint8Array;
}
export interface RequestFinalizeBlock {
    txs: Uint8Array[];
    decidedLastCommit: CommitInfo;
    misbehavior: Misbehavior[];
    /** hash is the merkle root hash of the fields of the decided block. */
    hash: Uint8Array;
    height: bigint;
    time: Timestamp;
    nextValidatorsHash: Uint8Array;
    /** proposer_address is the address of the public key of the original proposer of the block. */
    proposerAddress: Uint8Array;
}
export interface Response {
    exception?: ResponseException;
    echo?: ResponseEcho;
    flush?: ResponseFlush;
    info?: ResponseInfo;
    initChain?: ResponseInitChain;
    query?: ResponseQuery;
    checkTx?: ResponseCheckTx;
    commit?: ResponseCommit;
    listSnapshots?: ResponseListSnapshots;
    offerSnapshot?: ResponseOfferSnapshot;
    loadSnapshotChunk?: ResponseLoadSnapshotChunk;
    applySnapshotChunk?: ResponseApplySnapshotChunk;
    prepareProposal?: ResponsePrepareProposal;
    processProposal?: ResponseProcessProposal;
    extendVote?: ResponseExtendVote;
    verifyVoteExtension?: ResponseVerifyVoteExtension;
    finalizeBlock?: ResponseFinalizeBlock;
}
/** nondeterministic */
export interface ResponseException {
    error: string;
}
export interface ResponseEcho {
    message: string;
}
export interface ResponseFlush {
}
export interface ResponseInfo {
    data: string;
    version: string;
    appVersion: bigint;
    lastBlockHeight: bigint;
    lastBlockAppHash: Uint8Array;
}
export interface ResponseInitChain {
    consensusParams?: ConsensusParams;
    validators: ValidatorUpdate[];
    appHash: Uint8Array;
}
export interface ResponseQuery {
    code: number;
    /** bytes data = 2; // use "value" instead. */
    log: string;
    /** nondeterministic */
    info: string;
    index: bigint;
    key: Uint8Array;
    value: Uint8Array;
    proofOps?: ProofOps;
    height: bigint;
    codespace: string;
}
export interface ResponseCheckTx {
    code: number;
    data: Uint8Array;
    /** nondeterministic */
    log: string;
    /** nondeterministic */
    info: string;
    gasWanted: bigint;
    gasUsed: bigint;
    events: Event[];
    codespace: string;
}
export interface ResponseCommit {
    retainHeight: bigint;
}
export interface ResponseListSnapshots {
    snapshots: Snapshot[];
}
export interface ResponseOfferSnapshot {
    result: ResponseOfferSnapshot_Result;
}
export interface ResponseLoadSnapshotChunk {
    chunk: Uint8Array;
}
export interface ResponseApplySnapshotChunk {
    result: ResponseApplySnapshotChunk_Result;
    /** Chunks to refetch and reapply */
    refetchChunks: number[];
    /** Chunk senders to reject and ban */
    rejectSenders: string[];
}
export interface ResponsePrepareProposal {
    txs: Uint8Array[];
}
export interface ResponseProcessProposal {
    status: ResponseProcessProposal_ProposalStatus;
}
export interface ResponseExtendVote {
    voteExtension: Uint8Array;
}
export interface ResponseVerifyVoteExtension {
    status: ResponseVerifyVoteExtension_VerifyStatus;
}
export interface ResponseFinalizeBlock {
    /** set of block events emmitted as part of executing the block */
    events: Event[];
    /**
     * the result of executing each transaction including the events
     * the particular transction emitted. This should match the order
     * of the transactions delivered in the block itself
     */
    txResults: ExecTxResult[];
    /** a list of updates to the validator set. These will reflect the validator set at current height + 2. */
    validatorUpdates: ValidatorUpdate[];
    /** updates to the consensus params, if any. */
    consensusParamUpdates?: ConsensusParams;
    /**
     * app_hash is the hash of the applications' state which is used to confirm that execution of the transactions was
     * deterministic. It is up to the application to decide which algorithm to use.
     */
    appHash: Uint8Array;
}
export interface CommitInfo {
    round: number;
    votes: VoteInfo[];
}
/**
 * ExtendedCommitInfo is similar to CommitInfo except that it is only used in
 * the PrepareProposal request such that CometBFT can provide vote extensions
 * to the application.
 */
export interface ExtendedCommitInfo {
    /** The round at which the block proposer decided in the previous height. */
    round: number;
    /**
     * List of validators' addresses in the last validator set with their voting
     * information, including vote extensions.
     */
    votes: ExtendedVoteInfo[];
}
/**
 * Event allows application developers to attach additional information to
 * ResponseFinalizeBlock and ResponseCheckTx.
 * Later, transactions may be queried using these events.
 */
export interface Event {
    type: string;
    attributes: EventAttribute[];
}
/** EventAttribute is a single key-value pair, associated with an event. */
export interface EventAttribute {
    key: string;
    value: string;
    /** nondeterministic */
    index: boolean;
}
/**
 * ExecTxResult contains results of executing one individual transaction.
 *
 * * Its structure is equivalent to #ResponseDeliverTx which will be deprecated/deleted
 */
export interface ExecTxResult {
    code: number;
    data: Uint8Array;
    /** nondeterministic */
    log: string;
    /** nondeterministic */
    info: string;
    gasWanted: bigint;
    gasUsed: bigint;
    events: Event[];
    codespace: string;
}
/**
 * TxResult contains results of executing the transaction.
 *
 * One usage is indexing transaction results.
 */
export interface TxResult {
    height: bigint;
    index: number;
    tx: Uint8Array;
    result: ExecTxResult;
}
export interface Validator {
    /** The first 20 bytes of SHA256(public key) */
    address: Uint8Array;
    /** PubKey pub_key = 2 [(gogoproto.nullable)=false]; */
    power: bigint;
}
export interface ValidatorUpdate {
    pubKey: PublicKey;
    power: bigint;
}
export interface VoteInfo {
    validator: Validator;
    blockIdFlag: BlockIDFlag;
}
export interface ExtendedVoteInfo {
    /** The validator that sent the vote. */
    validator: Validator;
    /** Non-deterministic extension provided by the sending validator's application. */
    voteExtension: Uint8Array;
    /** Vote extension signature created by CometBFT */
    extensionSignature: Uint8Array;
    /** block_id_flag indicates whether the validator voted for a block, nil, or did not vote at all */
    blockIdFlag: BlockIDFlag;
}
export interface Misbehavior {
    type: MisbehaviorType;
    /** The offending validator */
    validator: Validator;
    /** The height when the offense occurred */
    height: bigint;
    /** The corresponding time where the offense occurred */
    time: Timestamp;
    /**
     * Total voting power of the validator set in case the ABCI application does
     * not store historical validators.
     * https://github.com/tendermint/tendermint/issues/4581
     */
    totalVotingPower: bigint;
}
export interface Snapshot {
    /** The height at which the snapshot was taken */
    height: bigint;
    /** The application-specific snapshot format */
    format: number;
    /** Number of chunks in the snapshot */
    chunks: number;
    /** Arbitrary snapshot hash, equal only if identical */
    hash: Uint8Array;
    /** Arbitrary application metadata */
    metadata: Uint8Array;
}
export declare const Request: {
    typeUrl: string;
    encode(message: Request, writer?: BinaryWriter): BinaryWriter;
    decode(input: BinaryReader | Uint8Array, length?: number): Request;
    fromJSON(object: any): Request;
    toJSON(message: Request): JsonSafe<Request>;
    fromPartial<I extends {
        echo?: {
            message?: string | undefined;
        } | undefined;
        flush?: {} | undefined;
        info?: {
            version?: string | undefined;
            blockVersion?: bigint | undefined;
            p2pVersion?: bigint | undefined;
            abciVersion?: string | undefined;
        } | undefined;
        initChain?: {
            time?: {
                seconds?: bigint | undefined;
                nanos?: number | undefined;
            } | undefined;
            chainId?: string | undefined;
            consensusParams?: {
                block?: {
                    maxBytes?: bigint | undefined;
                    maxGas?: bigint | undefined;
                } | undefined;
                evidence?: {
                    maxAgeNumBlocks?: bigint | undefined;
                    maxAgeDuration?: {
                        seconds?: bigint | undefined;
                        nanos?: number | undefined;
                    } | undefined;
                    maxBytes?: bigint | undefined;
                } | undefined;
                validator?: {
                    pubKeyTypes?: string[] | undefined;
                } | undefined;
                version?: {
                    app?: bigint | undefined;
                } | undefined;
                abci?: {
                    voteExtensionsEnableHeight?: bigint | undefined;
                } | undefined;
            } | undefined;
            validators?: {
                pubKey?: {
                    ed25519?: Uint8Array | undefined;
                    secp256k1?: Uint8Array | undefined;
                } | undefined;
                power?: bigint | undefined;
            }[] | undefined;
            appStateBytes?: Uint8Array | undefined;
            initialHeight?: bigint | undefined;
        } | undefined;
        query?: {
            data?: Uint8Array | undefined;
            path?: string | undefined;
            height?: bigint | undefined;
            prove?: boolean | undefined;
        } | undefined;
        checkTx?: {
            tx?: Uint8Array | undefined;
            type?: CheckTxType | undefined;
        } | undefined;
        commit?: {} | undefined;
        listSnapshots?: {} | undefined;
        offerSnapshot?: {
            snapshot?: {
                height?: bigint | undefined;
                format?: number | undefined;
                chunks?: number | undefined;
                hash?: Uint8Array | undefined;
                metadata?: Uint8Array | undefined;
            } | undefined;
            appHash?: Uint8Array | undefined;
        } | undefined;
        loadSnapshotChunk?: {
            height?: bigint | undefined;
            format?: number | undefined;
            chunk?: number | undefined;
        } | undefined;
        applySnapshotChunk?: {
            index?: number | undefined;
            chunk?: Uint8Array | undefined;
            sender?: string | undefined;
        } | undefined;
        prepareProposal?: {
            maxTxBytes?: bigint | undefined;
            txs?: Uint8Array[] | undefined;
            localLastCommit?: {
                round?: number | undefined;
                votes?: {
                    validator?: {
                        address?: Uint8Array | undefined;
                        power?: bigint | undefined;
                    } | undefined;
                    voteExtension?: Uint8Array | undefined;
                    extensionSignature?: Uint8Array | undefined;
                    blockIdFlag?: BlockIDFlag | undefined;
                }[] | undefined;
            } | undefined;
            misbehavior?: {
                type?: MisbehaviorType | undefined;
                validator?: {
                    address?: Uint8Array | undefined;
                    power?: bigint | undefined;
                } | undefined;
                height?: bigint | undefined;
                time?: {
                    seconds?: bigint | undefined;
                    nanos?: number | undefined;
                } | undefined;
                totalVotingPower?: bigint | undefined;
            }[] | undefined;
            height?: bigint | undefined;
            time?: {
                seconds?: bigint | undefined;
                nanos?: number | undefined;
            } | undefined;
            nextValidatorsHash?: Uint8Array | undefined;
            proposerAddress?: Uint8Array | undefined;
        } | undefined;
        processProposal?: {
            txs?: Uint8Array[] | undefined;
            proposedLastCommit?: {
                round?: number | undefined;
                votes?: {
                    validator?: {
                        address?: Uint8Array | undefined;
                        power?: bigint | undefined;
                    } | undefined;
                    blockIdFlag?: BlockIDFlag | undefined;
                }[] | undefined;
            } | undefined;
            misbehavior?: {
                type?: MisbehaviorType | undefined;
                validator?: {
                    address?: Uint8Array | undefined;
                    power?: bigint | undefined;
                } | undefined;
                height?: bigint | undefined;
                time?: {
                    seconds?: bigint | undefined;
                    nanos?: number | undefined;
                } | undefined;
                totalVotingPower?: bigint | undefined;
            }[] | undefined;
            hash?: Uint8Array | undefined;
            height?: bigint | undefined;
            time?: {
                seconds?: bigint | undefined;
                nanos?: number | undefined;
            } | undefined;
            nextValidatorsHash?: Uint8Array | undefined;
            proposerAddress?: Uint8Array | undefined;
        } | undefined;
        extendVote?: {
            hash?: Uint8Array | undefined;
            height?: bigint | undefined;
            time?: {
                seconds?: bigint | undefined;
                nanos?: number | undefined;
            } | undefined;
            txs?: Uint8Array[] | undefined;
            proposedLastCommit?: {
                round?: number | undefined;
                votes?: {
                    validator?: {
                        address?: Uint8Array | undefined;
                        power?: bigint | undefined;
                    } | undefined;
                    blockIdFlag?: BlockIDFlag | undefined;
                }[] | undefined;
            } | undefined;
            misbehavior?: {
                type?: MisbehaviorType | undefined;
                validator?: {
                    address?: Uint8Array | undefined;
                    power?: bigint | undefined;
                } | undefined;
                height?: bigint | undefined;
                time?: {
                    seconds?: bigint | undefined;
                    nanos?: number | undefined;
                } | undefined;
                totalVotingPower?: bigint | undefined;
            }[] | undefined;
            nextValidatorsHash?: Uint8Array | undefined;
            proposerAddress?: Uint8Array | undefined;
        } | undefined;
        verifyVoteExtension?: {
            hash?: Uint8Array | undefined;
            validatorAddress?: Uint8Array | undefined;
            height?: bigint | undefined;
            voteExtension?: Uint8Array | undefined;
        } | undefined;
        finalizeBlock?: {
            txs?: Uint8Array[] | undefined;
            decidedLastCommit?: {
                round?: number | undefined;
                votes?: {
                    validator?: {
                        address?: Uint8Array | undefined;
                        power?: bigint | undefined;
                    } | undefined;
                    blockIdFlag?: BlockIDFlag | undefined;
                }[] | undefined;
            } | undefined;
            misbehavior?: {
                type?: MisbehaviorType | undefined;
                validator?: {
                    address?: Uint8Array | undefined;
                    power?: bigint | undefined;
                } | undefined;
                height?: bigint | undefined;
                time?: {
                    seconds?: bigint | undefined;
                    nanos?: number | undefined;
                } | undefined;
                totalVotingPower?: bigint | undefined;
            }[] | undefined;
            hash?: Uint8Array | undefined;
            height?: bigint | undefined;
            time?: {
                seconds?: bigint | undefined;
                nanos?: number | undefined;
            } | undefined;
            nextValidatorsHash?: Uint8Array | undefined;
            proposerAddress?: Uint8Array | undefined;
        } | undefined;
    } & {
        echo?: ({
            message?: string | undefined;
        } & {
            message?: string | undefined;
        } & Record<Exclude<keyof I["echo"], "message">, never>) | undefined;
        flush?: ({} & {} & Record<Exclude<keyof I["flush"], never>, never>) | undefined;
        info?: ({
            version?: string | undefined;
            blockVersion?: bigint | undefined;
            p2pVersion?: bigint | undefined;
            abciVersion?: string | undefined;
        } & {
            version?: string | undefined;
            blockVersion?: bigint | undefined;
            p2pVersion?: bigint | undefined;
            abciVersion?: string | undefined;
        } & Record<Exclude<keyof I["info"], keyof RequestInfo>, never>) | undefined;
        initChain?: ({
            time?: {
                seconds?: bigint | undefined;
                nanos?: number | undefined;
            } | undefined;
            chainId?: string | undefined;
            consensusParams?: {
                block?: {
                    maxBytes?: bigint | undefined;
                    maxGas?: bigint | undefined;
                } | undefined;
                evidence?: {
                    maxAgeNumBlocks?: bigint | undefined;
                    maxAgeDuration?: {
                        seconds?: bigint | undefined;
                        nanos?: number | undefined;
                    } | undefined;
                    maxBytes?: bigint | undefined;
                } | undefined;
                validator?: {
                    pubKeyTypes?: string[] | undefined;
                } | undefined;
                version?: {
                    app?: bigint | undefined;
                } | undefined;
                abci?: {
                    voteExtensionsEnableHeight?: bigint | undefined;
                } | undefined;
            } | undefined;
            validators?: {
                pubKey?: {
                    ed25519?: Uint8Array | undefined;
                    secp256k1?: Uint8Array | undefined;
                } | undefined;
                power?: bigint | undefined;
            }[] | undefined;
            appStateBytes?: Uint8Array | undefined;
            initialHeight?: bigint | undefined;
        } & {
            time?: ({
                seconds?: bigint | undefined;
                nanos?: number | undefined;
            } & {
                seconds?: bigint | undefined;
                nanos?: number | undefined;
            } & Record<Exclude<keyof I["initChain"]["time"], keyof Timestamp>, never>) | undefined;
            chainId?: string | undefined;
            consensusParams?: ({
                block?: {
                    maxBytes?: bigint | undefined;
                    maxGas?: bigint | undefined;
                } | undefined;
                evidence?: {
                    maxAgeNumBlocks?: bigint | undefined;
                    maxAgeDuration?: {
                        seconds?: bigint | undefined;
                        nanos?: number | undefined;
                    } | undefined;
                    maxBytes?: bigint | undefined;
                } | undefined;
                validator?: {
                    pubKeyTypes?: string[] | undefined;
                } | undefined;
                version?: {
                    app?: bigint | undefined;
                } | undefined;
                abci?: {
                    voteExtensionsEnableHeight?: bigint | undefined;
                } | undefined;
            } & {
                block?: ({
                    maxBytes?: bigint | undefined;
                    maxGas?: bigint | undefined;
                } & {
                    maxBytes?: bigint | undefined;
                    maxGas?: bigint | undefined;
                } & Record<Exclude<keyof I["initChain"]["consensusParams"]["block"], keyof import("../types/params").BlockParams>, never>) | undefined;
                evidence?: ({
                    maxAgeNumBlocks?: bigint | undefined;
                    maxAgeDuration?: {
                        seconds?: bigint | undefined;
                        nanos?: number | undefined;
                    } | undefined;
                    maxBytes?: bigint | undefined;
                } & {
                    maxAgeNumBlocks?: bigint | undefined;
                    maxAgeDuration?: ({
                        seconds?: bigint | undefined;
                        nanos?: number | undefined;
                    } & {
                        seconds?: bigint | undefined;
                        nanos?: number | undefined;
                    } & Record<Exclude<keyof I["initChain"]["consensusParams"]["evidence"]["maxAgeDuration"], keyof import("../../google/protobuf/duration").Duration>, never>) | undefined;
                    maxBytes?: bigint | undefined;
                } & Record<Exclude<keyof I["initChain"]["consensusParams"]["evidence"], keyof import("../types/params").EvidenceParams>, never>) | undefined;
                validator?: ({
                    pubKeyTypes?: string[] | undefined;
                } & {
                    pubKeyTypes?: (string[] & string[] & Record<Exclude<keyof I["initChain"]["consensusParams"]["validator"]["pubKeyTypes"], keyof string[]>, never>) | undefined;
                } & Record<Exclude<keyof I["initChain"]["consensusParams"]["validator"], "pubKeyTypes">, never>) | undefined;
                version?: ({
                    app?: bigint | undefined;
                } & {
                    app?: bigint | undefined;
                } & Record<Exclude<keyof I["initChain"]["consensusParams"]["version"], "app">, never>) | undefined;
                abci?: ({
                    voteExtensionsEnableHeight?: bigint | undefined;
                } & {
                    voteExtensionsEnableHeight?: bigint | undefined;
                } & Record<Exclude<keyof I["initChain"]["consensusParams"]["abci"], "voteExtensionsEnableHeight">, never>) | undefined;
            } & Record<Exclude<keyof I["initChain"]["consensusParams"], keyof ConsensusParams>, never>) | undefined;
            validators?: ({
                pubKey?: {
                    ed25519?: Uint8Array | undefined;
                    secp256k1?: Uint8Array | undefined;
                } | undefined;
                power?: bigint | undefined;
            }[] & ({
                pubKey?: {
                    ed25519?: Uint8Array | undefined;
                    secp256k1?: Uint8Array | undefined;
                } | undefined;
                power?: bigint | undefined;
            } & {
                pubKey?: ({
                    ed25519?: Uint8Array | undefined;
                    secp256k1?: Uint8Array | undefined;
                } & {
                    ed25519?: Uint8Array | undefined;
                    secp256k1?: Uint8Array | undefined;
                } & Record<Exclude<keyof I["initChain"]["validators"][number]["pubKey"], keyof PublicKey>, never>) | undefined;
                power?: bigint | undefined;
            } & Record<Exclude<keyof I["initChain"]["validators"][number], keyof ValidatorUpdate>, never>)[] & Record<Exclude<keyof I["initChain"]["validators"], keyof {
                pubKey?: {
                    ed25519?: Uint8Array | undefined;
                    secp256k1?: Uint8Array | undefined;
                } | undefined;
                power?: bigint | undefined;
            }[]>, never>) | undefined;
            appStateBytes?: Uint8Array | undefined;
            initialHeight?: bigint | undefined;
        } & Record<Exclude<keyof I["initChain"], keyof RequestInitChain>, never>) | undefined;
        query?: ({
            data?: Uint8Array | undefined;
            path?: string | undefined;
            height?: bigint | undefined;
            prove?: boolean | undefined;
        } & {
            data?: Uint8Array | undefined;
            path?: string | undefined;
            height?: bigint | undefined;
            prove?: boolean | undefined;
        } & Record<Exclude<keyof I["query"], keyof RequestQuery>, never>) | undefined;
        checkTx?: ({
            tx?: Uint8Array | undefined;
            type?: CheckTxType | undefined;
        } & {
            tx?: Uint8Array | undefined;
            type?: CheckTxType | undefined;
        } & Record<Exclude<keyof I["checkTx"], keyof RequestCheckTx>, never>) | undefined;
        commit?: ({} & {} & Record<Exclude<keyof I["commit"], never>, never>) | undefined;
        listSnapshots?: ({} & {} & Record<Exclude<keyof I["listSnapshots"], never>, never>) | undefined;
        offerSnapshot?: ({
            snapshot?: {
                height?: bigint | undefined;
                format?: number | undefined;
                chunks?: number | undefined;
                hash?: Uint8Array | undefined;
                metadata?: Uint8Array | undefined;
            } | undefined;
            appHash?: Uint8Array | undefined;
        } & {
            snapshot?: ({
                height?: bigint | undefined;
                format?: number | undefined;
                chunks?: number | undefined;
                hash?: Uint8Array | undefined;
                metadata?: Uint8Array | undefined;
            } & {
                height?: bigint | undefined;
                format?: number | undefined;
                chunks?: number | undefined;
                hash?: Uint8Array | undefined;
                metadata?: Uint8Array | undefined;
            } & Record<Exclude<keyof I["offerSnapshot"]["snapshot"], keyof Snapshot>, never>) | undefined;
            appHash?: Uint8Array | undefined;
        } & Record<Exclude<keyof I["offerSnapshot"], keyof RequestOfferSnapshot>, never>) | undefined;
        loadSnapshotChunk?: ({
            height?: bigint | undefined;
            format?: number | undefined;
            chunk?: number | undefined;
        } & {
            height?: bigint | undefined;
            format?: number | undefined;
            chunk?: number | undefined;
        } & Record<Exclude<keyof I["loadSnapshotChunk"], keyof RequestLoadSnapshotChunk>, never>) | undefined;
        applySnapshotChunk?: ({
            index?: number | undefined;
            chunk?: Uint8Array | undefined;
            sender?: string | undefined;
        } & {
            index?: number | undefined;
            chunk?: Uint8Array | undefined;
            sender?: string | undefined;
        } & Record<Exclude<keyof I["applySnapshotChunk"], keyof RequestApplySnapshotChunk>, never>) | undefined;
        prepareProposal?: ({
            maxTxBytes?: bigint | undefined;
            txs?: Uint8Array[] | undefined;
            localLastCommit?: {
                round?: number | undefined;
                votes?: {
                    validator?: {
                        address?: Uint8Array | undefined;
                        power?: bigint | undefined;
                    } | undefined;
                    voteExtension?: Uint8Array | undefined;
                    extensionSignature?: Uint8Array | undefined;
                    blockIdFlag?: BlockIDFlag | undefined;
                }[] | undefined;
            } | undefined;
            misbehavior?: {
                type?: MisbehaviorType | undefined;
                validator?: {
                    address?: Uint8Array | undefined;
                    power?: bigint | undefined;
                } | undefined;
                height?: bigint | undefined;
                time?: {
                    seconds?: bigint | undefined;
                    nanos?: number | undefined;
                } | undefined;
                totalVotingPower?: bigint | undefined;
            }[] | undefined;
            height?: bigint | undefined;
            time?: {
                seconds?: bigint | undefined;
                nanos?: number | undefined;
            } | undefined;
            nextValidatorsHash?: Uint8Array | undefined;
            proposerAddress?: Uint8Array | undefined;
        } & {
            maxTxBytes?: bigint | undefined;
            txs?: (Uint8Array[] & Uint8Array[] & Record<Exclude<keyof I["prepareProposal"]["txs"], keyof Uint8Array[]>, never>) | undefined;
            localLastCommit?: ({
                round?: number | undefined;
                votes?: {
                    validator?: {
                        address?: Uint8Array | undefined;
                        power?: bigint | undefined;
                    } | undefined;
                    voteExtension?: Uint8Array | undefined;
                    extensionSignature?: Uint8Array | undefined;
                    blockIdFlag?: BlockIDFlag | undefined;
                }[] | undefined;
            } & {
                round?: number | undefined;
                votes?: ({
                    validator?: {
                        address?: Uint8Array | undefined;
                        power?: bigint | undefined;
                    } | undefined;
                    voteExtension?: Uint8Array | undefined;
                    extensionSignature?: Uint8Array | undefined;
                    blockIdFlag?: BlockIDFlag | undefined;
                }[] & ({
                    validator?: {
                        address?: Uint8Array | undefined;
                        power?: bigint | undefined;
                    } | undefined;
                    voteExtension?: Uint8Array | undefined;
                    extensionSignature?: Uint8Array | undefined;
                    blockIdFlag?: BlockIDFlag | undefined;
                } & {
                    validator?: ({
                        address?: Uint8Array | undefined;
                        power?: bigint | undefined;
                    } & {
                        address?: Uint8Array | undefined;
                        power?: bigint | undefined;
                    } & Record<Exclude<keyof I["prepareProposal"]["localLastCommit"]["votes"][number]["validator"], keyof Validator>, never>) | undefined;
                    voteExtension?: Uint8Array | undefined;
                    extensionSignature?: Uint8Array | undefined;
                    blockIdFlag?: BlockIDFlag | undefined;
                } & Record<Exclude<keyof I["prepareProposal"]["localLastCommit"]["votes"][number], keyof ExtendedVoteInfo>, never>)[] & Record<Exclude<keyof I["prepareProposal"]["localLastCommit"]["votes"], keyof {
                    validator?: {
                        address?: Uint8Array | undefined;
                        power?: bigint | undefined;
                    } | undefined;
                    voteExtension?: Uint8Array | undefined;
                    extensionSignature?: Uint8Array | undefined;
                    blockIdFlag?: BlockIDFlag | undefined;
                }[]>, never>) | undefined;
            } & Record<Exclude<keyof I["prepareProposal"]["localLastCommit"], keyof ExtendedCommitInfo>, never>) | undefined;
            misbehavior?: ({
                type?: MisbehaviorType | undefined;
                validator?: {
                    address?: Uint8Array | undefined;
                    power?: bigint | undefined;
                } | undefined;
                height?: bigint | undefined;
                time?: {
                    seconds?: bigint | undefined;
                    nanos?: number | undefined;
                } | undefined;
                totalVotingPower?: bigint | undefined;
            }[] & ({
                type?: MisbehaviorType | undefined;
                validator?: {
                    address?: Uint8Array | undefined;
                    power?: bigint | undefined;
                } | undefined;
                height?: bigint | undefined;
                time?: {
                    seconds?: bigint | undefined;
                    nanos?: number | undefined;
                } | undefined;
                totalVotingPower?: bigint | undefined;
            } & {
                type?: MisbehaviorType | undefined;
                validator?: ({
                    address?: Uint8Array | undefined;
                    power?: bigint | undefined;
                } & {
                    address?: Uint8Array | undefined;
                    power?: bigint | undefined;
                } & Record<Exclude<keyof I["prepareProposal"]["misbehavior"][number]["validator"], keyof Validator>, never>) | undefined;
                height?: bigint | undefined;
                time?: ({
                    seconds?: bigint | undefined;
                    nanos?: number | undefined;
                } & {
                    seconds?: bigint | undefined;
                    nanos?: number | undefined;
                } & Record<Exclude<keyof I["prepareProposal"]["misbehavior"][number]["time"], keyof Timestamp>, never>) | undefined;
                totalVotingPower?: bigint | undefined;
            } & Record<Exclude<keyof I["prepareProposal"]["misbehavior"][number], keyof Misbehavior>, never>)[] & Record<Exclude<keyof I["prepareProposal"]["misbehavior"], keyof {
                type?: MisbehaviorType | undefined;
                validator?: {
                    address?: Uint8Array | undefined;
                    power?: bigint | undefined;
                } | undefined;
                height?: bigint | undefined;
                time?: {
                    seconds?: bigint | undefined;
                    nanos?: number | undefined;
                } | undefined;
                totalVotingPower?: bigint | undefined;
            }[]>, never>) | undefined;
            height?: bigint | undefined;
            time?: ({
                seconds?: bigint | undefined;
                nanos?: number | undefined;
            } & {
                seconds?: bigint | undefined;
                nanos?: number | undefined;
            } & Record<Exclude<keyof I["prepareProposal"]["time"], keyof Timestamp>, never>) | undefined;
            nextValidatorsHash?: Uint8Array | undefined;
            proposerAddress?: Uint8Array | undefined;
        } & Record<Exclude<keyof I["prepareProposal"], keyof RequestPrepareProposal>, never>) | undefined;
        processProposal?: ({
            txs?: Uint8Array[] | undefined;
            proposedLastCommit?: {
                round?: number | undefined;
                votes?: {
                    validator?: {
                        address?: Uint8Array | undefined;
                        power?: bigint | undefined;
                    } | undefined;
                    blockIdFlag?: BlockIDFlag | undefined;
                }[] | undefined;
            } | undefined;
            misbehavior?: {
                type?: MisbehaviorType | undefined;
                validator?: {
                    address?: Uint8Array | undefined;
                    power?: bigint | undefined;
                } | undefined;
                height?: bigint | undefined;
                time?: {
                    seconds?: bigint | undefined;
                    nanos?: number | undefined;
                } | undefined;
                totalVotingPower?: bigint | undefined;
            }[] | undefined;
            hash?: Uint8Array | undefined;
            height?: bigint | undefined;
            time?: {
                seconds?: bigint | undefined;
                nanos?: number | undefined;
            } | undefined;
            nextValidatorsHash?: Uint8Array | undefined;
            proposerAddress?: Uint8Array | undefined;
        } & {
            txs?: (Uint8Array[] & Uint8Array[] & Record<Exclude<keyof I["processProposal"]["txs"], keyof Uint8Array[]>, never>) | undefined;
            proposedLastCommit?: ({
                round?: number | undefined;
                votes?: {
                    validator?: {
                        address?: Uint8Array | undefined;
                        power?: bigint | undefined;
                    } | undefined;
                    blockIdFlag?: BlockIDFlag | undefined;
                }[] | undefined;
            } & {
                round?: number | undefined;
                votes?: ({
                    validator?: {
                        address?: Uint8Array | undefined;
                        power?: bigint | undefined;
                    } | undefined;
                    blockIdFlag?: BlockIDFlag | undefined;
                }[] & ({
                    validator?: {
                        address?: Uint8Array | undefined;
                        power?: bigint | undefined;
                    } | undefined;
                    blockIdFlag?: BlockIDFlag | undefined;
                } & {
                    validator?: ({
                        address?: Uint8Array | undefined;
                        power?: bigint | undefined;
                    } & {
                        address?: Uint8Array | undefined;
                        power?: bigint | undefined;
                    } & Record<Exclude<keyof I["processProposal"]["proposedLastCommit"]["votes"][number]["validator"], keyof Validator>, never>) | undefined;
                    blockIdFlag?: BlockIDFlag | undefined;
                } & Record<Exclude<keyof I["processProposal"]["proposedLastCommit"]["votes"][number], keyof VoteInfo>, never>)[] & Record<Exclude<keyof I["processProposal"]["proposedLastCommit"]["votes"], keyof {
                    validator?: {
                        address?: Uint8Array | undefined;
                        power?: bigint | undefined;
                    } | undefined;
                    blockIdFlag?: BlockIDFlag | undefined;
                }[]>, never>) | undefined;
            } & Record<Exclude<keyof I["processProposal"]["proposedLastCommit"], keyof CommitInfo>, never>) | undefined;
            misbehavior?: ({
                type?: MisbehaviorType | undefined;
                validator?: {
                    address?: Uint8Array | undefined;
                    power?: bigint | undefined;
                } | undefined;
                height?: bigint | undefined;
                time?: {
                    seconds?: bigint | undefined;
                    nanos?: number | undefined;
                } | undefined;
                totalVotingPower?: bigint | undefined;
            }[] & ({
                type?: MisbehaviorType | undefined;
                validator?: {
                    address?: Uint8Array | undefined;
                    power?: bigint | undefined;
                } | undefined;
                height?: bigint | undefined;
                time?: {
                    seconds?: bigint | undefined;
                    nanos?: number | undefined;
                } | undefined;
                totalVotingPower?: bigint | undefined;
            } & {
                type?: MisbehaviorType | undefined;
                validator?: ({
                    address?: Uint8Array | undefined;
                    power?: bigint | undefined;
                } & {
                    address?: Uint8Array | undefined;
                    power?: bigint | undefined;
                } & Record<Exclude<keyof I["processProposal"]["misbehavior"][number]["validator"], keyof Validator>, never>) | undefined;
                height?: bigint | undefined;
                time?: ({
                    seconds?: bigint | undefined;
                    nanos?: number | undefined;
                } & {
                    seconds?: bigint | undefined;
                    nanos?: number | undefined;
                } & Record<Exclude<keyof I["processProposal"]["misbehavior"][number]["time"], keyof Timestamp>, never>) | undefined;
                totalVotingPower?: bigint | undefined;
            } & Record<Exclude<keyof I["processProposal"]["misbehavior"][number], keyof Misbehavior>, never>)[] & Record<Exclude<keyof I["processProposal"]["misbehavior"], keyof {
                type?: MisbehaviorType | undefined;
                validator?: {
                    address?: Uint8Array | undefined;
                    power?: bigint | undefined;
                } | undefined;
                height?: bigint | undefined;
                time?: {
                    seconds?: bigint | undefined;
                    nanos?: number | undefined;
                } | undefined;
                totalVotingPower?: bigint | undefined;
            }[]>, never>) | undefined;
            hash?: Uint8Array | undefined;
            height?: bigint | undefined;
            time?: ({
                seconds?: bigint | undefined;
                nanos?: number | undefined;
            } & {
                seconds?: bigint | undefined;
                nanos?: number | undefined;
            } & Record<Exclude<keyof I["processProposal"]["time"], keyof Timestamp>, never>) | undefined;
            nextValidatorsHash?: Uint8Array | undefined;
            proposerAddress?: Uint8Array | undefined;
        } & Record<Exclude<keyof I["processProposal"], keyof RequestProcessProposal>, never>) | undefined;
        extendVote?: ({
            hash?: Uint8Array | undefined;
            height?: bigint | undefined;
            time?: {
                seconds?: bigint | undefined;
                nanos?: number | undefined;
            } | undefined;
            txs?: Uint8Array[] | undefined;
            proposedLastCommit?: {
                round?: number | undefined;
                votes?: {
                    validator?: {
                        address?: Uint8Array | undefined;
                        power?: bigint | undefined;
                    } | undefined;
                    blockIdFlag?: BlockIDFlag | undefined;
                }[] | undefined;
            } | undefined;
            misbehavior?: {
                type?: MisbehaviorType | undefined;
                validator?: {
                    address?: Uint8Array | undefined;
                    power?: bigint | undefined;
                } | undefined;
                height?: bigint | undefined;
                time?: {
                    seconds?: bigint | undefined;
                    nanos?: number | undefined;
                } | undefined;
                totalVotingPower?: bigint | undefined;
            }[] | undefined;
            nextValidatorsHash?: Uint8Array | undefined;
            proposerAddress?: Uint8Array | undefined;
        } & {
            hash?: Uint8Array | undefined;
            height?: bigint | undefined;
            time?: ({
                seconds?: bigint | undefined;
                nanos?: number | undefined;
            } & {
                seconds?: bigint | undefined;
                nanos?: number | undefined;
            } & Record<Exclude<keyof I["extendVote"]["time"], keyof Timestamp>, never>) | undefined;
            txs?: (Uint8Array[] & Uint8Array[] & Record<Exclude<keyof I["extendVote"]["txs"], keyof Uint8Array[]>, never>) | undefined;
            proposedLastCommit?: ({
                round?: number | undefined;
                votes?: {
                    validator?: {
                        address?: Uint8Array | undefined;
                        power?: bigint | undefined;
                    } | undefined;
                    blockIdFlag?: BlockIDFlag | undefined;
                }[] | undefined;
            } & {
                round?: number | undefined;
                votes?: ({
                    validator?: {
                        address?: Uint8Array | undefined;
                        power?: bigint | undefined;
                    } | undefined;
                    blockIdFlag?: BlockIDFlag | undefined;
                }[] & ({
                    validator?: {
                        address?: Uint8Array | undefined;
                        power?: bigint | undefined;
                    } | undefined;
                    blockIdFlag?: BlockIDFlag | undefined;
                } & {
                    validator?: ({
                        address?: Uint8Array | undefined;
                        power?: bigint | undefined;
                    } & {
                        address?: Uint8Array | undefined;
                        power?: bigint | undefined;
                    } & Record<Exclude<keyof I["extendVote"]["proposedLastCommit"]["votes"][number]["validator"], keyof Validator>, never>) | undefined;
                    blockIdFlag?: BlockIDFlag | undefined;
                } & Record<Exclude<keyof I["extendVote"]["proposedLastCommit"]["votes"][number], keyof VoteInfo>, never>)[] & Record<Exclude<keyof I["extendVote"]["proposedLastCommit"]["votes"], keyof {
                    validator?: {
                        address?: Uint8Array | undefined;
                        power?: bigint | undefined;
                    } | undefined;
                    blockIdFlag?: BlockIDFlag | undefined;
                }[]>, never>) | undefined;
            } & Record<Exclude<keyof I["extendVote"]["proposedLastCommit"], keyof CommitInfo>, never>) | undefined;
            misbehavior?: ({
                type?: MisbehaviorType | undefined;
                validator?: {
                    address?: Uint8Array | undefined;
                    power?: bigint | undefined;
                } | undefined;
                height?: bigint | undefined;
                time?: {
                    seconds?: bigint | undefined;
                    nanos?: number | undefined;
                } | undefined;
                totalVotingPower?: bigint | undefined;
            }[] & ({
                type?: MisbehaviorType | undefined;
                validator?: {
                    address?: Uint8Array | undefined;
                    power?: bigint | undefined;
                } | undefined;
                height?: bigint | undefined;
                time?: {
                    seconds?: bigint | undefined;
                    nanos?: number | undefined;
                } | undefined;
                totalVotingPower?: bigint | undefined;
            } & {
                type?: MisbehaviorType | undefined;
                validator?: ({
                    address?: Uint8Array | undefined;
                    power?: bigint | undefined;
                } & {
                    address?: Uint8Array | undefined;
                    power?: bigint | undefined;
                } & Record<Exclude<keyof I["extendVote"]["misbehavior"][number]["validator"], keyof Validator>, never>) | undefined;
                height?: bigint | undefined;
                time?: ({
                    seconds?: bigint | undefined;
                    nanos?: number | undefined;
                } & {
                    seconds?: bigint | undefined;
                    nanos?: number | undefined;
                } & Record<Exclude<keyof I["extendVote"]["misbehavior"][number]["time"], keyof Timestamp>, never>) | undefined;
                totalVotingPower?: bigint | undefined;
            } & Record<Exclude<keyof I["extendVote"]["misbehavior"][number], keyof Misbehavior>, never>)[] & Record<Exclude<keyof I["extendVote"]["misbehavior"], keyof {
                type?: MisbehaviorType | undefined;
                validator?: {
                    address?: Uint8Array | undefined;
                    power?: bigint | undefined;
                } | undefined;
                height?: bigint | undefined;
                time?: {
                    seconds?: bigint | undefined;
                    nanos?: number | undefined;
                } | undefined;
                totalVotingPower?: bigint | undefined;
            }[]>, never>) | undefined;
            nextValidatorsHash?: Uint8Array | undefined;
            proposerAddress?: Uint8Array | undefined;
        } & Record<Exclude<keyof I["extendVote"], keyof RequestExtendVote>, never>) | undefined;
        verifyVoteExtension?: ({
            hash?: Uint8Array | undefined;
            validatorAddress?: Uint8Array | undefined;
            height?: bigint | undefined;
            voteExtension?: Uint8Array | undefined;
        } & {
            hash?: Uint8Array | undefined;
            validatorAddress?: Uint8Array | undefined;
            height?: bigint | undefined;
            voteExtension?: Uint8Array | undefined;
        } & Record<Exclude<keyof I["verifyVoteExtension"], keyof RequestVerifyVoteExtension>, never>) | undefined;
        finalizeBlock?: ({
            txs?: Uint8Array[] | undefined;
            decidedLastCommit?: {
                round?: number | undefined;
                votes?: {
                    validator?: {
                        address?: Uint8Array | undefined;
                        power?: bigint | undefined;
                    } | undefined;
                    blockIdFlag?: BlockIDFlag | undefined;
                }[] | undefined;
            } | undefined;
            misbehavior?: {
                type?: MisbehaviorType | undefined;
                validator?: {
                    address?: Uint8Array | undefined;
                    power?: bigint | undefined;
                } | undefined;
                height?: bigint | undefined;
                time?: {
                    seconds?: bigint | undefined;
                    nanos?: number | undefined;
                } | undefined;
                totalVotingPower?: bigint | undefined;
            }[] | undefined;
            hash?: Uint8Array | undefined;
            height?: bigint | undefined;
            time?: {
                seconds?: bigint | undefined;
                nanos?: number | undefined;
            } | undefined;
            nextValidatorsHash?: Uint8Array | undefined;
            proposerAddress?: Uint8Array | undefined;
        } & {
            txs?: (Uint8Array[] & Uint8Array[] & Record<Exclude<keyof I["finalizeBlock"]["txs"], keyof Uint8Array[]>, never>) | undefined;
            decidedLastCommit?: ({
                round?: number | undefined;
                votes?: {
                    validator?: {
                        address?: Uint8Array | undefined;
                        power?: bigint | undefined;
                    } | undefined;
                    blockIdFlag?: BlockIDFlag | undefined;
                }[] | undefined;
            } & {
                round?: number | undefined;
                votes?: ({
                    validator?: {
                        address?: Uint8Array | undefined;
                        power?: bigint | undefined;
                    } | undefined;
                    blockIdFlag?: BlockIDFlag | undefined;
                }[] & ({
                    validator?: {
                        address?: Uint8Array | undefined;
                        power?: bigint | undefined;
                    } | undefined;
                    blockIdFlag?: BlockIDFlag | undefined;
                } & {
                    validator?: ({
                        address?: Uint8Array | undefined;
                        power?: bigint | undefined;
                    } & {
                        address?: Uint8Array | undefined;
                        power?: bigint | undefined;
                    } & Record<Exclude<keyof I["finalizeBlock"]["decidedLastCommit"]["votes"][number]["validator"], keyof Validator>, never>) | undefined;
                    blockIdFlag?: BlockIDFlag | undefined;
                } & Record<Exclude<keyof I["finalizeBlock"]["decidedLastCommit"]["votes"][number], keyof VoteInfo>, never>)[] & Record<Exclude<keyof I["finalizeBlock"]["decidedLastCommit"]["votes"], keyof {
                    validator?: {
                        address?: Uint8Array | undefined;
                        power?: bigint | undefined;
                    } | undefined;
                    blockIdFlag?: BlockIDFlag | undefined;
                }[]>, never>) | undefined;
            } & Record<Exclude<keyof I["finalizeBlock"]["decidedLastCommit"], keyof CommitInfo>, never>) | undefined;
            misbehavior?: ({
                type?: MisbehaviorType | undefined;
                validator?: {
                    address?: Uint8Array | undefined;
                    power?: bigint | undefined;
                } | undefined;
                height?: bigint | undefined;
                time?: {
                    seconds?: bigint | undefined;
                    nanos?: number | undefined;
                } | undefined;
                totalVotingPower?: bigint | undefined;
            }[] & ({
                type?: MisbehaviorType | undefined;
                validator?: {
                    address?: Uint8Array | undefined;
                    power?: bigint | undefined;
                } | undefined;
                height?: bigint | undefined;
                time?: {
                    seconds?: bigint | undefined;
                    nanos?: number | undefined;
                } | undefined;
                totalVotingPower?: bigint | undefined;
            } & {
                type?: MisbehaviorType | undefined;
                validator?: ({
                    address?: Uint8Array | undefined;
                    power?: bigint | undefined;
                } & {
                    address?: Uint8Array | undefined;
                    power?: bigint | undefined;
                } & Record<Exclude<keyof I["finalizeBlock"]["misbehavior"][number]["validator"], keyof Validator>, never>) | undefined;
                height?: bigint | undefined;
                time?: ({
                    seconds?: bigint | undefined;
                    nanos?: number | undefined;
                } & {
                    seconds?: bigint | undefined;
                    nanos?: number | undefined;
                } & Record<Exclude<keyof I["finalizeBlock"]["misbehavior"][number]["time"], keyof Timestamp>, never>) | undefined;
                totalVotingPower?: bigint | undefined;
            } & Record<Exclude<keyof I["finalizeBlock"]["misbehavior"][number], keyof Misbehavior>, never>)[] & Record<Exclude<keyof I["finalizeBlock"]["misbehavior"], keyof {
                type?: MisbehaviorType | undefined;
                validator?: {
                    address?: Uint8Array | undefined;
                    power?: bigint | undefined;
                } | undefined;
                height?: bigint | undefined;
                time?: {
                    seconds?: bigint | undefined;
                    nanos?: number | undefined;
                } | undefined;
                totalVotingPower?: bigint | undefined;
            }[]>, never>) | undefined;
            hash?: Uint8Array | undefined;
            height?: bigint | undefined;
            time?: ({
                seconds?: bigint | undefined;
                nanos?: number | undefined;
            } & {
                seconds?: bigint | undefined;
                nanos?: number | undefined;
            } & Record<Exclude<keyof I["finalizeBlock"]["time"], keyof Timestamp>, never>) | undefined;
            nextValidatorsHash?: Uint8Array | undefined;
            proposerAddress?: Uint8Array | undefined;
        } & Record<Exclude<keyof I["finalizeBlock"], keyof RequestFinalizeBlock>, never>) | undefined;
    } & Record<Exclude<keyof I, keyof Request>, never>>(object: I): Request;
};
export declare const RequestEcho: {
    typeUrl: string;
    encode(message: RequestEcho, writer?: BinaryWriter): BinaryWriter;
    decode(input: BinaryReader | Uint8Array, length?: number): RequestEcho;
    fromJSON(object: any): RequestEcho;
    toJSON(message: RequestEcho): JsonSafe<RequestEcho>;
    fromPartial<I extends {
        message?: string | undefined;
    } & {
        message?: string | undefined;
    } & Record<Exclude<keyof I, "message">, never>>(object: I): RequestEcho;
};
export declare const RequestFlush: {
    typeUrl: string;
    encode(_: RequestFlush, writer?: BinaryWriter): BinaryWriter;
    decode(input: BinaryReader | Uint8Array, length?: number): RequestFlush;
    fromJSON(_: any): RequestFlush;
    toJSON(_: RequestFlush): JsonSafe<RequestFlush>;
    fromPartial<I extends {} & {} & Record<Exclude<keyof I, never>, never>>(_: I): RequestFlush;
};
export declare const RequestInfo: {
    typeUrl: string;
    encode(message: RequestInfo, writer?: BinaryWriter): BinaryWriter;
    decode(input: BinaryReader | Uint8Array, length?: number): RequestInfo;
    fromJSON(object: any): RequestInfo;
    toJSON(message: RequestInfo): JsonSafe<RequestInfo>;
    fromPartial<I extends {
        version?: string | undefined;
        blockVersion?: bigint | undefined;
        p2pVersion?: bigint | undefined;
        abciVersion?: string | undefined;
    } & {
        version?: string | undefined;
        blockVersion?: bigint | undefined;
        p2pVersion?: bigint | undefined;
        abciVersion?: string | undefined;
    } & Record<Exclude<keyof I, keyof RequestInfo>, never>>(object: I): RequestInfo;
};
export declare const RequestInitChain: {
    typeUrl: string;
    encode(message: RequestInitChain, writer?: BinaryWriter): BinaryWriter;
    decode(input: BinaryReader | Uint8Array, length?: number): RequestInitChain;
    fromJSON(object: any): RequestInitChain;
    toJSON(message: RequestInitChain): JsonSafe<RequestInitChain>;
    fromPartial<I extends {
        time?: {
            seconds?: bigint | undefined;
            nanos?: number | undefined;
        } | undefined;
        chainId?: string | undefined;
        consensusParams?: {
            block?: {
                maxBytes?: bigint | undefined;
                maxGas?: bigint | undefined;
            } | undefined;
            evidence?: {
                maxAgeNumBlocks?: bigint | undefined;
                maxAgeDuration?: {
                    seconds?: bigint | undefined;
                    nanos?: number | undefined;
                } | undefined;
                maxBytes?: bigint | undefined;
            } | undefined;
            validator?: {
                pubKeyTypes?: string[] | undefined;
            } | undefined;
            version?: {
                app?: bigint | undefined;
            } | undefined;
            abci?: {
                voteExtensionsEnableHeight?: bigint | undefined;
            } | undefined;
        } | undefined;
        validators?: {
            pubKey?: {
                ed25519?: Uint8Array | undefined;
                secp256k1?: Uint8Array | undefined;
            } | undefined;
            power?: bigint | undefined;
        }[] | undefined;
        appStateBytes?: Uint8Array | undefined;
        initialHeight?: bigint | undefined;
    } & {
        time?: ({
            seconds?: bigint | undefined;
            nanos?: number | undefined;
        } & {
            seconds?: bigint | undefined;
            nanos?: number | undefined;
        } & Record<Exclude<keyof I["time"], keyof Timestamp>, never>) | undefined;
        chainId?: string | undefined;
        consensusParams?: ({
            block?: {
                maxBytes?: bigint | undefined;
                maxGas?: bigint | undefined;
            } | undefined;
            evidence?: {
                maxAgeNumBlocks?: bigint | undefined;
                maxAgeDuration?: {
                    seconds?: bigint | undefined;
                    nanos?: number | undefined;
                } | undefined;
                maxBytes?: bigint | undefined;
            } | undefined;
            validator?: {
                pubKeyTypes?: string[] | undefined;
            } | undefined;
            version?: {
                app?: bigint | undefined;
            } | undefined;
            abci?: {
                voteExtensionsEnableHeight?: bigint | undefined;
            } | undefined;
        } & {
            block?: ({
                maxBytes?: bigint | undefined;
                maxGas?: bigint | undefined;
            } & {
                maxBytes?: bigint | undefined;
                maxGas?: bigint | undefined;
            } & Record<Exclude<keyof I["consensusParams"]["block"], keyof import("../types/params").BlockParams>, never>) | undefined;
            evidence?: ({
                maxAgeNumBlocks?: bigint | undefined;
                maxAgeDuration?: {
                    seconds?: bigint | undefined;
                    nanos?: number | undefined;
                } | undefined;
                maxBytes?: bigint | undefined;
            } & {
                maxAgeNumBlocks?: bigint | undefined;
                maxAgeDuration?: ({
                    seconds?: bigint | undefined;
                    nanos?: number | undefined;
                } & {
                    seconds?: bigint | undefined;
                    nanos?: number | undefined;
                } & Record<Exclude<keyof I["consensusParams"]["evidence"]["maxAgeDuration"], keyof import("../../google/protobuf/duration").Duration>, never>) | undefined;
                maxBytes?: bigint | undefined;
            } & Record<Exclude<keyof I["consensusParams"]["evidence"], keyof import("../types/params").EvidenceParams>, never>) | undefined;
            validator?: ({
                pubKeyTypes?: string[] | undefined;
            } & {
                pubKeyTypes?: (string[] & string[] & Record<Exclude<keyof I["consensusParams"]["validator"]["pubKeyTypes"], keyof string[]>, never>) | undefined;
            } & Record<Exclude<keyof I["consensusParams"]["validator"], "pubKeyTypes">, never>) | undefined;
            version?: ({
                app?: bigint | undefined;
            } & {
                app?: bigint | undefined;
            } & Record<Exclude<keyof I["consensusParams"]["version"], "app">, never>) | undefined;
            abci?: ({
                voteExtensionsEnableHeight?: bigint | undefined;
            } & {
                voteExtensionsEnableHeight?: bigint | undefined;
            } & Record<Exclude<keyof I["consensusParams"]["abci"], "voteExtensionsEnableHeight">, never>) | undefined;
        } & Record<Exclude<keyof I["consensusParams"], keyof ConsensusParams>, never>) | undefined;
        validators?: ({
            pubKey?: {
                ed25519?: Uint8Array | undefined;
                secp256k1?: Uint8Array | undefined;
            } | undefined;
            power?: bigint | undefined;
        }[] & ({
            pubKey?: {
                ed25519?: Uint8Array | undefined;
                secp256k1?: Uint8Array | undefined;
            } | undefined;
            power?: bigint | undefined;
        } & {
            pubKey?: ({
                ed25519?: Uint8Array | undefined;
                secp256k1?: Uint8Array | undefined;
            } & {
                ed25519?: Uint8Array | undefined;
                secp256k1?: Uint8Array | undefined;
            } & Record<Exclude<keyof I["validators"][number]["pubKey"], keyof PublicKey>, never>) | undefined;
            power?: bigint | undefined;
        } & Record<Exclude<keyof I["validators"][number], keyof ValidatorUpdate>, never>)[] & Record<Exclude<keyof I["validators"], keyof {
            pubKey?: {
                ed25519?: Uint8Array | undefined;
                secp256k1?: Uint8Array | undefined;
            } | undefined;
            power?: bigint | undefined;
        }[]>, never>) | undefined;
        appStateBytes?: Uint8Array | undefined;
        initialHeight?: bigint | undefined;
    } & Record<Exclude<keyof I, keyof RequestInitChain>, never>>(object: I): RequestInitChain;
};
export declare const RequestQuery: {
    typeUrl: string;
    encode(message: RequestQuery, writer?: BinaryWriter): BinaryWriter;
    decode(input: BinaryReader | Uint8Array, length?: number): RequestQuery;
    fromJSON(object: any): RequestQuery;
    toJSON(message: RequestQuery): JsonSafe<RequestQuery>;
    fromPartial<I extends {
        data?: Uint8Array | undefined;
        path?: string | undefined;
        height?: bigint | undefined;
        prove?: boolean | undefined;
    } & {
        data?: Uint8Array | undefined;
        path?: string | undefined;
        height?: bigint | undefined;
        prove?: boolean | undefined;
    } & Record<Exclude<keyof I, keyof RequestQuery>, never>>(object: I): RequestQuery;
};
export declare const RequestCheckTx: {
    typeUrl: string;
    encode(message: RequestCheckTx, writer?: BinaryWriter): BinaryWriter;
    decode(input: BinaryReader | Uint8Array, length?: number): RequestCheckTx;
    fromJSON(object: any): RequestCheckTx;
    toJSON(message: RequestCheckTx): JsonSafe<RequestCheckTx>;
    fromPartial<I extends {
        tx?: Uint8Array | undefined;
        type?: CheckTxType | undefined;
    } & {
        tx?: Uint8Array | undefined;
        type?: CheckTxType | undefined;
    } & Record<Exclude<keyof I, keyof RequestCheckTx>, never>>(object: I): RequestCheckTx;
};
export declare const RequestCommit: {
    typeUrl: string;
    encode(_: RequestCommit, writer?: BinaryWriter): BinaryWriter;
    decode(input: BinaryReader | Uint8Array, length?: number): RequestCommit;
    fromJSON(_: any): RequestCommit;
    toJSON(_: RequestCommit): JsonSafe<RequestCommit>;
    fromPartial<I extends {} & {} & Record<Exclude<keyof I, never>, never>>(_: I): RequestCommit;
};
export declare const RequestListSnapshots: {
    typeUrl: string;
    encode(_: RequestListSnapshots, writer?: BinaryWriter): BinaryWriter;
    decode(input: BinaryReader | Uint8Array, length?: number): RequestListSnapshots;
    fromJSON(_: any): RequestListSnapshots;
    toJSON(_: RequestListSnapshots): JsonSafe<RequestListSnapshots>;
    fromPartial<I extends {} & {} & Record<Exclude<keyof I, never>, never>>(_: I): RequestListSnapshots;
};
export declare const RequestOfferSnapshot: {
    typeUrl: string;
    encode(message: RequestOfferSnapshot, writer?: BinaryWriter): BinaryWriter;
    decode(input: BinaryReader | Uint8Array, length?: number): RequestOfferSnapshot;
    fromJSON(object: any): RequestOfferSnapshot;
    toJSON(message: RequestOfferSnapshot): JsonSafe<RequestOfferSnapshot>;
    fromPartial<I extends {
        snapshot?: {
            height?: bigint | undefined;
            format?: number | undefined;
            chunks?: number | undefined;
            hash?: Uint8Array | undefined;
            metadata?: Uint8Array | undefined;
        } | undefined;
        appHash?: Uint8Array | undefined;
    } & {
        snapshot?: ({
            height?: bigint | undefined;
            format?: number | undefined;
            chunks?: number | undefined;
            hash?: Uint8Array | undefined;
            metadata?: Uint8Array | undefined;
        } & {
            height?: bigint | undefined;
            format?: number | undefined;
            chunks?: number | undefined;
            hash?: Uint8Array | undefined;
            metadata?: Uint8Array | undefined;
        } & Record<Exclude<keyof I["snapshot"], keyof Snapshot>, never>) | undefined;
        appHash?: Uint8Array | undefined;
    } & Record<Exclude<keyof I, keyof RequestOfferSnapshot>, never>>(object: I): RequestOfferSnapshot;
};
export declare const RequestLoadSnapshotChunk: {
    typeUrl: string;
    encode(message: RequestLoadSnapshotChunk, writer?: BinaryWriter): BinaryWriter;
    decode(input: BinaryReader | Uint8Array, length?: number): RequestLoadSnapshotChunk;
    fromJSON(object: any): RequestLoadSnapshotChunk;
    toJSON(message: RequestLoadSnapshotChunk): JsonSafe<RequestLoadSnapshotChunk>;
    fromPartial<I extends {
        height?: bigint | undefined;
        format?: number | undefined;
        chunk?: number | undefined;
    } & {
        height?: bigint | undefined;
        format?: number | undefined;
        chunk?: number | undefined;
    } & Record<Exclude<keyof I, keyof RequestLoadSnapshotChunk>, never>>(object: I): RequestLoadSnapshotChunk;
};
export declare const RequestApplySnapshotChunk: {
    typeUrl: string;
    encode(message: RequestApplySnapshotChunk, writer?: BinaryWriter): BinaryWriter;
    decode(input: BinaryReader | Uint8Array, length?: number): RequestApplySnapshotChunk;
    fromJSON(object: any): RequestApplySnapshotChunk;
    toJSON(message: RequestApplySnapshotChunk): JsonSafe<RequestApplySnapshotChunk>;
    fromPartial<I extends {
        index?: number | undefined;
        chunk?: Uint8Array | undefined;
        sender?: string | undefined;
    } & {
        index?: number | undefined;
        chunk?: Uint8Array | undefined;
        sender?: string | undefined;
    } & Record<Exclude<keyof I, keyof RequestApplySnapshotChunk>, never>>(object: I): RequestApplySnapshotChunk;
};
export declare const RequestPrepareProposal: {
    typeUrl: string;
    encode(message: RequestPrepareProposal, writer?: BinaryWriter): BinaryWriter;
    decode(input: BinaryReader | Uint8Array, length?: number): RequestPrepareProposal;
    fromJSON(object: any): RequestPrepareProposal;
    toJSON(message: RequestPrepareProposal): JsonSafe<RequestPrepareProposal>;
    fromPartial<I extends {
        maxTxBytes?: bigint | undefined;
        txs?: Uint8Array[] | undefined;
        localLastCommit?: {
            round?: number | undefined;
            votes?: {
                validator?: {
                    address?: Uint8Array | undefined;
                    power?: bigint | undefined;
                } | undefined;
                voteExtension?: Uint8Array | undefined;
                extensionSignature?: Uint8Array | undefined;
                blockIdFlag?: BlockIDFlag | undefined;
            }[] | undefined;
        } | undefined;
        misbehavior?: {
            type?: MisbehaviorType | undefined;
            validator?: {
                address?: Uint8Array | undefined;
                power?: bigint | undefined;
            } | undefined;
            height?: bigint | undefined;
            time?: {
                seconds?: bigint | undefined;
                nanos?: number | undefined;
            } | undefined;
            totalVotingPower?: bigint | undefined;
        }[] | undefined;
        height?: bigint | undefined;
        time?: {
            seconds?: bigint | undefined;
            nanos?: number | undefined;
        } | undefined;
        nextValidatorsHash?: Uint8Array | undefined;
        proposerAddress?: Uint8Array | undefined;
    } & {
        maxTxBytes?: bigint | undefined;
        txs?: (Uint8Array[] & Uint8Array[] & Record<Exclude<keyof I["txs"], keyof Uint8Array[]>, never>) | undefined;
        localLastCommit?: ({
            round?: number | undefined;
            votes?: {
                validator?: {
                    address?: Uint8Array | undefined;
                    power?: bigint | undefined;
                } | undefined;
                voteExtension?: Uint8Array | undefined;
                extensionSignature?: Uint8Array | undefined;
                blockIdFlag?: BlockIDFlag | undefined;
            }[] | undefined;
        } & {
            round?: number | undefined;
            votes?: ({
                validator?: {
                    address?: Uint8Array | undefined;
                    power?: bigint | undefined;
                } | undefined;
                voteExtension?: Uint8Array | undefined;
                extensionSignature?: Uint8Array | undefined;
                blockIdFlag?: BlockIDFlag | undefined;
            }[] & ({
                validator?: {
                    address?: Uint8Array | undefined;
                    power?: bigint | undefined;
                } | undefined;
                voteExtension?: Uint8Array | undefined;
                extensionSignature?: Uint8Array | undefined;
                blockIdFlag?: BlockIDFlag | undefined;
            } & {
                validator?: ({
                    address?: Uint8Array | undefined;
                    power?: bigint | undefined;
                } & {
                    address?: Uint8Array | undefined;
                    power?: bigint | undefined;
                } & Record<Exclude<keyof I["localLastCommit"]["votes"][number]["validator"], keyof Validator>, never>) | undefined;
                voteExtension?: Uint8Array | undefined;
                extensionSignature?: Uint8Array | undefined;
                blockIdFlag?: BlockIDFlag | undefined;
            } & Record<Exclude<keyof I["localLastCommit"]["votes"][number], keyof ExtendedVoteInfo>, never>)[] & Record<Exclude<keyof I["localLastCommit"]["votes"], keyof {
                validator?: {
                    address?: Uint8Array | undefined;
                    power?: bigint | undefined;
                } | undefined;
                voteExtension?: Uint8Array | undefined;
                extensionSignature?: Uint8Array | undefined;
                blockIdFlag?: BlockIDFlag | undefined;
            }[]>, never>) | undefined;
        } & Record<Exclude<keyof I["localLastCommit"], keyof ExtendedCommitInfo>, never>) | undefined;
        misbehavior?: ({
            type?: MisbehaviorType | undefined;
            validator?: {
                address?: Uint8Array | undefined;
                power?: bigint | undefined;
            } | undefined;
            height?: bigint | undefined;
            time?: {
                seconds?: bigint | undefined;
                nanos?: number | undefined;
            } | undefined;
            totalVotingPower?: bigint | undefined;
        }[] & ({
            type?: MisbehaviorType | undefined;
            validator?: {
                address?: Uint8Array | undefined;
                power?: bigint | undefined;
            } | undefined;
            height?: bigint | undefined;
            time?: {
                seconds?: bigint | undefined;
                nanos?: number | undefined;
            } | undefined;
            totalVotingPower?: bigint | undefined;
        } & {
            type?: MisbehaviorType | undefined;
            validator?: ({
                address?: Uint8Array | undefined;
                power?: bigint | undefined;
            } & {
                address?: Uint8Array | undefined;
                power?: bigint | undefined;
            } & Record<Exclude<keyof I["misbehavior"][number]["validator"], keyof Validator>, never>) | undefined;
            height?: bigint | undefined;
            time?: ({
                seconds?: bigint | undefined;
                nanos?: number | undefined;
            } & {
                seconds?: bigint | undefined;
                nanos?: number | undefined;
            } & Record<Exclude<keyof I["misbehavior"][number]["time"], keyof Timestamp>, never>) | undefined;
            totalVotingPower?: bigint | undefined;
        } & Record<Exclude<keyof I["misbehavior"][number], keyof Misbehavior>, never>)[] & Record<Exclude<keyof I["misbehavior"], keyof {
            type?: MisbehaviorType | undefined;
            validator?: {
                address?: Uint8Array | undefined;
                power?: bigint | undefined;
            } | undefined;
            height?: bigint | undefined;
            time?: {
                seconds?: bigint | undefined;
                nanos?: number | undefined;
            } | undefined;
            totalVotingPower?: bigint | undefined;
        }[]>, never>) | undefined;
        height?: bigint | undefined;
        time?: ({
            seconds?: bigint | undefined;
            nanos?: number | undefined;
        } & {
            seconds?: bigint | undefined;
            nanos?: number | undefined;
        } & Record<Exclude<keyof I["time"], keyof Timestamp>, never>) | undefined;
        nextValidatorsHash?: Uint8Array | undefined;
        proposerAddress?: Uint8Array | undefined;
    } & Record<Exclude<keyof I, keyof RequestPrepareProposal>, never>>(object: I): RequestPrepareProposal;
};
export declare const RequestProcessProposal: {
    typeUrl: string;
    encode(message: RequestProcessProposal, writer?: BinaryWriter): BinaryWriter;
    decode(input: BinaryReader | Uint8Array, length?: number): RequestProcessProposal;
    fromJSON(object: any): RequestProcessProposal;
    toJSON(message: RequestProcessProposal): JsonSafe<RequestProcessProposal>;
    fromPartial<I extends {
        txs?: Uint8Array[] | undefined;
        proposedLastCommit?: {
            round?: number | undefined;
            votes?: {
                validator?: {
                    address?: Uint8Array | undefined;
                    power?: bigint | undefined;
                } | undefined;
                blockIdFlag?: BlockIDFlag | undefined;
            }[] | undefined;
        } | undefined;
        misbehavior?: {
            type?: MisbehaviorType | undefined;
            validator?: {
                address?: Uint8Array | undefined;
                power?: bigint | undefined;
            } | undefined;
            height?: bigint | undefined;
            time?: {
                seconds?: bigint | undefined;
                nanos?: number | undefined;
            } | undefined;
            totalVotingPower?: bigint | undefined;
        }[] | undefined;
        hash?: Uint8Array | undefined;
        height?: bigint | undefined;
        time?: {
            seconds?: bigint | undefined;
            nanos?: number | undefined;
        } | undefined;
        nextValidatorsHash?: Uint8Array | undefined;
        proposerAddress?: Uint8Array | undefined;
    } & {
        txs?: (Uint8Array[] & Uint8Array[] & Record<Exclude<keyof I["txs"], keyof Uint8Array[]>, never>) | undefined;
        proposedLastCommit?: ({
            round?: number | undefined;
            votes?: {
                validator?: {
                    address?: Uint8Array | undefined;
                    power?: bigint | undefined;
                } | undefined;
                blockIdFlag?: BlockIDFlag | undefined;
            }[] | undefined;
        } & {
            round?: number | undefined;
            votes?: ({
                validator?: {
                    address?: Uint8Array | undefined;
                    power?: bigint | undefined;
                } | undefined;
                blockIdFlag?: BlockIDFlag | undefined;
            }[] & ({
                validator?: {
                    address?: Uint8Array | undefined;
                    power?: bigint | undefined;
                } | undefined;
                blockIdFlag?: BlockIDFlag | undefined;
            } & {
                validator?: ({
                    address?: Uint8Array | undefined;
                    power?: bigint | undefined;
                } & {
                    address?: Uint8Array | undefined;
                    power?: bigint | undefined;
                } & Record<Exclude<keyof I["proposedLastCommit"]["votes"][number]["validator"], keyof Validator>, never>) | undefined;
                blockIdFlag?: BlockIDFlag | undefined;
            } & Record<Exclude<keyof I["proposedLastCommit"]["votes"][number], keyof VoteInfo>, never>)[] & Record<Exclude<keyof I["proposedLastCommit"]["votes"], keyof {
                validator?: {
                    address?: Uint8Array | undefined;
                    power?: bigint | undefined;
                } | undefined;
                blockIdFlag?: BlockIDFlag | undefined;
            }[]>, never>) | undefined;
        } & Record<Exclude<keyof I["proposedLastCommit"], keyof CommitInfo>, never>) | undefined;
        misbehavior?: ({
            type?: MisbehaviorType | undefined;
            validator?: {
                address?: Uint8Array | undefined;
                power?: bigint | undefined;
            } | undefined;
            height?: bigint | undefined;
            time?: {
                seconds?: bigint | undefined;
                nanos?: number | undefined;
            } | undefined;
            totalVotingPower?: bigint | undefined;
        }[] & ({
            type?: MisbehaviorType | undefined;
            validator?: {
                address?: Uint8Array | undefined;
                power?: bigint | undefined;
            } | undefined;
            height?: bigint | undefined;
            time?: {
                seconds?: bigint | undefined;
                nanos?: number | undefined;
            } | undefined;
            totalVotingPower?: bigint | undefined;
        } & {
            type?: MisbehaviorType | undefined;
            validator?: ({
                address?: Uint8Array | undefined;
                power?: bigint | undefined;
            } & {
                address?: Uint8Array | undefined;
                power?: bigint | undefined;
            } & Record<Exclude<keyof I["misbehavior"][number]["validator"], keyof Validator>, never>) | undefined;
            height?: bigint | undefined;
            time?: ({
                seconds?: bigint | undefined;
                nanos?: number | undefined;
            } & {
                seconds?: bigint | undefined;
                nanos?: number | undefined;
            } & Record<Exclude<keyof I["misbehavior"][number]["time"], keyof Timestamp>, never>) | undefined;
            totalVotingPower?: bigint | undefined;
        } & Record<Exclude<keyof I["misbehavior"][number], keyof Misbehavior>, never>)[] & Record<Exclude<keyof I["misbehavior"], keyof {
            type?: MisbehaviorType | undefined;
            validator?: {
                address?: Uint8Array | undefined;
                power?: bigint | undefined;
            } | undefined;
            height?: bigint | undefined;
            time?: {
                seconds?: bigint | undefined;
                nanos?: number | undefined;
            } | undefined;
            totalVotingPower?: bigint | undefined;
        }[]>, never>) | undefined;
        hash?: Uint8Array | undefined;
        height?: bigint | undefined;
        time?: ({
            seconds?: bigint | undefined;
            nanos?: number | undefined;
        } & {
            seconds?: bigint | undefined;
            nanos?: number | undefined;
        } & Record<Exclude<keyof I["time"], keyof Timestamp>, never>) | undefined;
        nextValidatorsHash?: Uint8Array | undefined;
        proposerAddress?: Uint8Array | undefined;
    } & Record<Exclude<keyof I, keyof RequestProcessProposal>, never>>(object: I): RequestProcessProposal;
};
export declare const RequestExtendVote: {
    typeUrl: string;
    encode(message: RequestExtendVote, writer?: BinaryWriter): BinaryWriter;
    decode(input: BinaryReader | Uint8Array, length?: number): RequestExtendVote;
    fromJSON(object: any): RequestExtendVote;
    toJSON(message: RequestExtendVote): JsonSafe<RequestExtendVote>;
    fromPartial<I extends {
        hash?: Uint8Array | undefined;
        height?: bigint | undefined;
        time?: {
            seconds?: bigint | undefined;
            nanos?: number | undefined;
        } | undefined;
        txs?: Uint8Array[] | undefined;
        proposedLastCommit?: {
            round?: number | undefined;
            votes?: {
                validator?: {
                    address?: Uint8Array | undefined;
                    power?: bigint | undefined;
                } | undefined;
                blockIdFlag?: BlockIDFlag | undefined;
            }[] | undefined;
        } | undefined;
        misbehavior?: {
            type?: MisbehaviorType | undefined;
            validator?: {
                address?: Uint8Array | undefined;
                power?: bigint | undefined;
            } | undefined;
            height?: bigint | undefined;
            time?: {
                seconds?: bigint | undefined;
                nanos?: number | undefined;
            } | undefined;
            totalVotingPower?: bigint | undefined;
        }[] | undefined;
        nextValidatorsHash?: Uint8Array | undefined;
        proposerAddress?: Uint8Array | undefined;
    } & {
        hash?: Uint8Array | undefined;
        height?: bigint | undefined;
        time?: ({
            seconds?: bigint | undefined;
            nanos?: number | undefined;
        } & {
            seconds?: bigint | undefined;
            nanos?: number | undefined;
        } & Record<Exclude<keyof I["time"], keyof Timestamp>, never>) | undefined;
        txs?: (Uint8Array[] & Uint8Array[] & Record<Exclude<keyof I["txs"], keyof Uint8Array[]>, never>) | undefined;
        proposedLastCommit?: ({
            round?: number | undefined;
            votes?: {
                validator?: {
                    address?: Uint8Array | undefined;
                    power?: bigint | undefined;
                } | undefined;
                blockIdFlag?: BlockIDFlag | undefined;
            }[] | undefined;
        } & {
            round?: number | undefined;
            votes?: ({
                validator?: {
                    address?: Uint8Array | undefined;
                    power?: bigint | undefined;
                } | undefined;
                blockIdFlag?: BlockIDFlag | undefined;
            }[] & ({
                validator?: {
                    address?: Uint8Array | undefined;
                    power?: bigint | undefined;
                } | undefined;
                blockIdFlag?: BlockIDFlag | undefined;
            } & {
                validator?: ({
                    address?: Uint8Array | undefined;
                    power?: bigint | undefined;
                } & {
                    address?: Uint8Array | undefined;
                    power?: bigint | undefined;
                } & Record<Exclude<keyof I["proposedLastCommit"]["votes"][number]["validator"], keyof Validator>, never>) | undefined;
                blockIdFlag?: BlockIDFlag | undefined;
            } & Record<Exclude<keyof I["proposedLastCommit"]["votes"][number], keyof VoteInfo>, never>)[] & Record<Exclude<keyof I["proposedLastCommit"]["votes"], keyof {
                validator?: {
                    address?: Uint8Array | undefined;
                    power?: bigint | undefined;
                } | undefined;
                blockIdFlag?: BlockIDFlag | undefined;
            }[]>, never>) | undefined;
        } & Record<Exclude<keyof I["proposedLastCommit"], keyof CommitInfo>, never>) | undefined;
        misbehavior?: ({
            type?: MisbehaviorType | undefined;
            validator?: {
                address?: Uint8Array | undefined;
                power?: bigint | undefined;
            } | undefined;
            height?: bigint | undefined;
            time?: {
                seconds?: bigint | undefined;
                nanos?: number | undefined;
            } | undefined;
            totalVotingPower?: bigint | undefined;
        }[] & ({
            type?: MisbehaviorType | undefined;
            validator?: {
                address?: Uint8Array | undefined;
                power?: bigint | undefined;
            } | undefined;
            height?: bigint | undefined;
            time?: {
                seconds?: bigint | undefined;
                nanos?: number | undefined;
            } | undefined;
            totalVotingPower?: bigint | undefined;
        } & {
            type?: MisbehaviorType | undefined;
            validator?: ({
                address?: Uint8Array | undefined;
                power?: bigint | undefined;
            } & {
                address?: Uint8Array | undefined;
                power?: bigint | undefined;
            } & Record<Exclude<keyof I["misbehavior"][number]["validator"], keyof Validator>, never>) | undefined;
            height?: bigint | undefined;
            time?: ({
                seconds?: bigint | undefined;
                nanos?: number | undefined;
            } & {
                seconds?: bigint | undefined;
                nanos?: number | undefined;
            } & Record<Exclude<keyof I["misbehavior"][number]["time"], keyof Timestamp>, never>) | undefined;
            totalVotingPower?: bigint | undefined;
        } & Record<Exclude<keyof I["misbehavior"][number], keyof Misbehavior>, never>)[] & Record<Exclude<keyof I["misbehavior"], keyof {
            type?: MisbehaviorType | undefined;
            validator?: {
                address?: Uint8Array | undefined;
                power?: bigint | undefined;
            } | undefined;
            height?: bigint | undefined;
            time?: {
                seconds?: bigint | undefined;
                nanos?: number | undefined;
            } | undefined;
            totalVotingPower?: bigint | undefined;
        }[]>, never>) | undefined;
        nextValidatorsHash?: Uint8Array | undefined;
        proposerAddress?: Uint8Array | undefined;
    } & Record<Exclude<keyof I, keyof RequestExtendVote>, never>>(object: I): RequestExtendVote;
};
export declare const RequestVerifyVoteExtension: {
    typeUrl: string;
    encode(message: RequestVerifyVoteExtension, writer?: BinaryWriter): BinaryWriter;
    decode(input: BinaryReader | Uint8Array, length?: number): RequestVerifyVoteExtension;
    fromJSON(object: any): RequestVerifyVoteExtension;
    toJSON(message: RequestVerifyVoteExtension): JsonSafe<RequestVerifyVoteExtension>;
    fromPartial<I extends {
        hash?: Uint8Array | undefined;
        validatorAddress?: Uint8Array | undefined;
        height?: bigint | undefined;
        voteExtension?: Uint8Array | undefined;
    } & {
        hash?: Uint8Array | undefined;
        validatorAddress?: Uint8Array | undefined;
        height?: bigint | undefined;
        voteExtension?: Uint8Array | undefined;
    } & Record<Exclude<keyof I, keyof RequestVerifyVoteExtension>, never>>(object: I): RequestVerifyVoteExtension;
};
export declare const RequestFinalizeBlock: {
    typeUrl: string;
    encode(message: RequestFinalizeBlock, writer?: BinaryWriter): BinaryWriter;
    decode(input: BinaryReader | Uint8Array, length?: number): RequestFinalizeBlock;
    fromJSON(object: any): RequestFinalizeBlock;
    toJSON(message: RequestFinalizeBlock): JsonSafe<RequestFinalizeBlock>;
    fromPartial<I extends {
        txs?: Uint8Array[] | undefined;
        decidedLastCommit?: {
            round?: number | undefined;
            votes?: {
                validator?: {
                    address?: Uint8Array | undefined;
                    power?: bigint | undefined;
                } | undefined;
                blockIdFlag?: BlockIDFlag | undefined;
            }[] | undefined;
        } | undefined;
        misbehavior?: {
            type?: MisbehaviorType | undefined;
            validator?: {
                address?: Uint8Array | undefined;
                power?: bigint | undefined;
            } | undefined;
            height?: bigint | undefined;
            time?: {
                seconds?: bigint | undefined;
                nanos?: number | undefined;
            } | undefined;
            totalVotingPower?: bigint | undefined;
        }[] | undefined;
        hash?: Uint8Array | undefined;
        height?: bigint | undefined;
        time?: {
            seconds?: bigint | undefined;
            nanos?: number | undefined;
        } | undefined;
        nextValidatorsHash?: Uint8Array | undefined;
        proposerAddress?: Uint8Array | undefined;
    } & {
        txs?: (Uint8Array[] & Uint8Array[] & Record<Exclude<keyof I["txs"], keyof Uint8Array[]>, never>) | undefined;
        decidedLastCommit?: ({
            round?: number | undefined;
            votes?: {
                validator?: {
                    address?: Uint8Array | undefined;
                    power?: bigint | undefined;
                } | undefined;
                blockIdFlag?: BlockIDFlag | undefined;
            }[] | undefined;
        } & {
            round?: number | undefined;
            votes?: ({
                validator?: {
                    address?: Uint8Array | undefined;
                    power?: bigint | undefined;
                } | undefined;
                blockIdFlag?: BlockIDFlag | undefined;
            }[] & ({
                validator?: {
                    address?: Uint8Array | undefined;
                    power?: bigint | undefined;
                } | undefined;
                blockIdFlag?: BlockIDFlag | undefined;
            } & {
                validator?: ({
                    address?: Uint8Array | undefined;
                    power?: bigint | undefined;
                } & {
                    address?: Uint8Array | undefined;
                    power?: bigint | undefined;
                } & Record<Exclude<keyof I["decidedLastCommit"]["votes"][number]["validator"], keyof Validator>, never>) | undefined;
                blockIdFlag?: BlockIDFlag | undefined;
            } & Record<Exclude<keyof I["decidedLastCommit"]["votes"][number], keyof VoteInfo>, never>)[] & Record<Exclude<keyof I["decidedLastCommit"]["votes"], keyof {
                validator?: {
                    address?: Uint8Array | undefined;
                    power?: bigint | undefined;
                } | undefined;
                blockIdFlag?: BlockIDFlag | undefined;
            }[]>, never>) | undefined;
        } & Record<Exclude<keyof I["decidedLastCommit"], keyof CommitInfo>, never>) | undefined;
        misbehavior?: ({
            type?: MisbehaviorType | undefined;
            validator?: {
                address?: Uint8Array | undefined;
                power?: bigint | undefined;
            } | undefined;
            height?: bigint | undefined;
            time?: {
                seconds?: bigint | undefined;
                nanos?: number | undefined;
            } | undefined;
            totalVotingPower?: bigint | undefined;
        }[] & ({
            type?: MisbehaviorType | undefined;
            validator?: {
                address?: Uint8Array | undefined;
                power?: bigint | undefined;
            } | undefined;
            height?: bigint | undefined;
            time?: {
                seconds?: bigint | undefined;
                nanos?: number | undefined;
            } | undefined;
            totalVotingPower?: bigint | undefined;
        } & {
            type?: MisbehaviorType | undefined;
            validator?: ({
                address?: Uint8Array | undefined;
                power?: bigint | undefined;
            } & {
                address?: Uint8Array | undefined;
                power?: bigint | undefined;
            } & Record<Exclude<keyof I["misbehavior"][number]["validator"], keyof Validator>, never>) | undefined;
            height?: bigint | undefined;
            time?: ({
                seconds?: bigint | undefined;
                nanos?: number | undefined;
            } & {
                seconds?: bigint | undefined;
                nanos?: number | undefined;
            } & Record<Exclude<keyof I["misbehavior"][number]["time"], keyof Timestamp>, never>) | undefined;
            totalVotingPower?: bigint | undefined;
        } & Record<Exclude<keyof I["misbehavior"][number], keyof Misbehavior>, never>)[] & Record<Exclude<keyof I["misbehavior"], keyof {
            type?: MisbehaviorType | undefined;
            validator?: {
                address?: Uint8Array | undefined;
                power?: bigint | undefined;
            } | undefined;
            height?: bigint | undefined;
            time?: {
                seconds?: bigint | undefined;
                nanos?: number | undefined;
            } | undefined;
            totalVotingPower?: bigint | undefined;
        }[]>, never>) | undefined;
        hash?: Uint8Array | undefined;
        height?: bigint | undefined;
        time?: ({
            seconds?: bigint | undefined;
            nanos?: number | undefined;
        } & {
            seconds?: bigint | undefined;
            nanos?: number | undefined;
        } & Record<Exclude<keyof I["time"], keyof Timestamp>, never>) | undefined;
        nextValidatorsHash?: Uint8Array | undefined;
        proposerAddress?: Uint8Array | undefined;
    } & Record<Exclude<keyof I, keyof RequestFinalizeBlock>, never>>(object: I): RequestFinalizeBlock;
};
export declare const Response: {
    typeUrl: string;
    encode(message: Response, writer?: BinaryWriter): BinaryWriter;
    decode(input: BinaryReader | Uint8Array, length?: number): Response;
    fromJSON(object: any): Response;
    toJSON(message: Response): JsonSafe<Response>;
    fromPartial<I extends {
        exception?: {
            error?: string | undefined;
        } | undefined;
        echo?: {
            message?: string | undefined;
        } | undefined;
        flush?: {} | undefined;
        info?: {
            data?: string | undefined;
            version?: string | undefined;
            appVersion?: bigint | undefined;
            lastBlockHeight?: bigint | undefined;
            lastBlockAppHash?: Uint8Array | undefined;
        } | undefined;
        initChain?: {
            consensusParams?: {
                block?: {
                    maxBytes?: bigint | undefined;
                    maxGas?: bigint | undefined;
                } | undefined;
                evidence?: {
                    maxAgeNumBlocks?: bigint | undefined;
                    maxAgeDuration?: {
                        seconds?: bigint | undefined;
                        nanos?: number | undefined;
                    } | undefined;
                    maxBytes?: bigint | undefined;
                } | undefined;
                validator?: {
                    pubKeyTypes?: string[] | undefined;
                } | undefined;
                version?: {
                    app?: bigint | undefined;
                } | undefined;
                abci?: {
                    voteExtensionsEnableHeight?: bigint | undefined;
                } | undefined;
            } | undefined;
            validators?: {
                pubKey?: {
                    ed25519?: Uint8Array | undefined;
                    secp256k1?: Uint8Array | undefined;
                } | undefined;
                power?: bigint | undefined;
            }[] | undefined;
            appHash?: Uint8Array | undefined;
        } | undefined;
        query?: {
            code?: number | undefined;
            log?: string | undefined;
            info?: string | undefined;
            index?: bigint | undefined;
            key?: Uint8Array | undefined;
            value?: Uint8Array | undefined;
            proofOps?: {
                ops?: {
                    type?: string | undefined;
                    key?: Uint8Array | undefined;
                    data?: Uint8Array | undefined;
                }[] | undefined;
            } | undefined;
            height?: bigint | undefined;
            codespace?: string | undefined;
        } | undefined;
        checkTx?: {
            code?: number | undefined;
            data?: Uint8Array | undefined;
            log?: string | undefined;
            info?: string | undefined;
            gasWanted?: bigint | undefined;
            gasUsed?: bigint | undefined;
            events?: {
                type?: string | undefined;
                attributes?: {
                    key?: string | undefined;
                    value?: string | undefined;
                    index?: boolean | undefined;
                }[] | undefined;
            }[] | undefined;
            codespace?: string | undefined;
        } | undefined;
        commit?: {
            retainHeight?: bigint | undefined;
        } | undefined;
        listSnapshots?: {
            snapshots?: {
                height?: bigint | undefined;
                format?: number | undefined;
                chunks?: number | undefined;
                hash?: Uint8Array | undefined;
                metadata?: Uint8Array | undefined;
            }[] | undefined;
        } | undefined;
        offerSnapshot?: {
            result?: ResponseOfferSnapshot_Result | undefined;
        } | undefined;
        loadSnapshotChunk?: {
            chunk?: Uint8Array | undefined;
        } | undefined;
        applySnapshotChunk?: {
            result?: ResponseApplySnapshotChunk_Result | undefined;
            refetchChunks?: number[] | undefined;
            rejectSenders?: string[] | undefined;
        } | undefined;
        prepareProposal?: {
            txs?: Uint8Array[] | undefined;
        } | undefined;
        processProposal?: {
            status?: ResponseProcessProposal_ProposalStatus | undefined;
        } | undefined;
        extendVote?: {
            voteExtension?: Uint8Array | undefined;
        } | undefined;
        verifyVoteExtension?: {
            status?: ResponseVerifyVoteExtension_VerifyStatus | undefined;
        } | undefined;
        finalizeBlock?: {
            events?: {
                type?: string | undefined;
                attributes?: {
                    key?: string | undefined;
                    value?: string | undefined;
                    index?: boolean | undefined;
                }[] | undefined;
            }[] | undefined;
            txResults?: {
                code?: number | undefined;
                data?: Uint8Array | undefined;
                log?: string | undefined;
                info?: string | undefined;
                gasWanted?: bigint | undefined;
                gasUsed?: bigint | undefined;
                events?: {
                    type?: string | undefined;
                    attributes?: {
                        key?: string | undefined;
                        value?: string | undefined;
                        index?: boolean | undefined;
                    }[] | undefined;
                }[] | undefined;
                codespace?: string | undefined;
            }[] | undefined;
            validatorUpdates?: {
                pubKey?: {
                    ed25519?: Uint8Array | undefined;
                    secp256k1?: Uint8Array | undefined;
                } | undefined;
                power?: bigint | undefined;
            }[] | undefined;
            consensusParamUpdates?: {
                block?: {
                    maxBytes?: bigint | undefined;
                    maxGas?: bigint | undefined;
                } | undefined;
                evidence?: {
                    maxAgeNumBlocks?: bigint | undefined;
                    maxAgeDuration?: {
                        seconds?: bigint | undefined;
                        nanos?: number | undefined;
                    } | undefined;
                    maxBytes?: bigint | undefined;
                } | undefined;
                validator?: {
                    pubKeyTypes?: string[] | undefined;
                } | undefined;
                version?: {
                    app?: bigint | undefined;
                } | undefined;
                abci?: {
                    voteExtensionsEnableHeight?: bigint | undefined;
                } | undefined;
            } | undefined;
            appHash?: Uint8Array | undefined;
        } | undefined;
    } & {
        exception?: ({
            error?: string | undefined;
        } & {
            error?: string | undefined;
        } & Record<Exclude<keyof I["exception"], "error">, never>) | undefined;
        echo?: ({
            message?: string | undefined;
        } & {
            message?: string | undefined;
        } & Record<Exclude<keyof I["echo"], "message">, never>) | undefined;
        flush?: ({} & {} & Record<Exclude<keyof I["flush"], never>, never>) | undefined;
        info?: ({
            data?: string | undefined;
            version?: string | undefined;
            appVersion?: bigint | undefined;
            lastBlockHeight?: bigint | undefined;
            lastBlockAppHash?: Uint8Array | undefined;
        } & {
            data?: string | undefined;
            version?: string | undefined;
            appVersion?: bigint | undefined;
            lastBlockHeight?: bigint | undefined;
            lastBlockAppHash?: Uint8Array | undefined;
        } & Record<Exclude<keyof I["info"], keyof ResponseInfo>, never>) | undefined;
        initChain?: ({
            consensusParams?: {
                block?: {
                    maxBytes?: bigint | undefined;
                    maxGas?: bigint | undefined;
                } | undefined;
                evidence?: {
                    maxAgeNumBlocks?: bigint | undefined;
                    maxAgeDuration?: {
                        seconds?: bigint | undefined;
                        nanos?: number | undefined;
                    } | undefined;
                    maxBytes?: bigint | undefined;
                } | undefined;
                validator?: {
                    pubKeyTypes?: string[] | undefined;
                } | undefined;
                version?: {
                    app?: bigint | undefined;
                } | undefined;
                abci?: {
                    voteExtensionsEnableHeight?: bigint | undefined;
                } | undefined;
            } | undefined;
            validators?: {
                pubKey?: {
                    ed25519?: Uint8Array | undefined;
                    secp256k1?: Uint8Array | undefined;
                } | undefined;
                power?: bigint | undefined;
            }[] | undefined;
            appHash?: Uint8Array | undefined;
        } & {
            consensusParams?: ({
                block?: {
                    maxBytes?: bigint | undefined;
                    maxGas?: bigint | undefined;
                } | undefined;
                evidence?: {
                    maxAgeNumBlocks?: bigint | undefined;
                    maxAgeDuration?: {
                        seconds?: bigint | undefined;
                        nanos?: number | undefined;
                    } | undefined;
                    maxBytes?: bigint | undefined;
                } | undefined;
                validator?: {
                    pubKeyTypes?: string[] | undefined;
                } | undefined;
                version?: {
                    app?: bigint | undefined;
                } | undefined;
                abci?: {
                    voteExtensionsEnableHeight?: bigint | undefined;
                } | undefined;
            } & {
                block?: ({
                    maxBytes?: bigint | undefined;
                    maxGas?: bigint | undefined;
                } & {
                    maxBytes?: bigint | undefined;
                    maxGas?: bigint | undefined;
                } & Record<Exclude<keyof I["initChain"]["consensusParams"]["block"], keyof import("../types/params").BlockParams>, never>) | undefined;
                evidence?: ({
                    maxAgeNumBlocks?: bigint | undefined;
                    maxAgeDuration?: {
                        seconds?: bigint | undefined;
                        nanos?: number | undefined;
                    } | undefined;
                    maxBytes?: bigint | undefined;
                } & {
                    maxAgeNumBlocks?: bigint | undefined;
                    maxAgeDuration?: ({
                        seconds?: bigint | undefined;
                        nanos?: number | undefined;
                    } & {
                        seconds?: bigint | undefined;
                        nanos?: number | undefined;
                    } & Record<Exclude<keyof I["initChain"]["consensusParams"]["evidence"]["maxAgeDuration"], keyof import("../../google/protobuf/duration").Duration>, never>) | undefined;
                    maxBytes?: bigint | undefined;
                } & Record<Exclude<keyof I["initChain"]["consensusParams"]["evidence"], keyof import("../types/params").EvidenceParams>, never>) | undefined;
                validator?: ({
                    pubKeyTypes?: string[] | undefined;
                } & {
                    pubKeyTypes?: (string[] & string[] & Record<Exclude<keyof I["initChain"]["consensusParams"]["validator"]["pubKeyTypes"], keyof string[]>, never>) | undefined;
                } & Record<Exclude<keyof I["initChain"]["consensusParams"]["validator"], "pubKeyTypes">, never>) | undefined;
                version?: ({
                    app?: bigint | undefined;
                } & {
                    app?: bigint | undefined;
                } & Record<Exclude<keyof I["initChain"]["consensusParams"]["version"], "app">, never>) | undefined;
                abci?: ({
                    voteExtensionsEnableHeight?: bigint | undefined;
                } & {
                    voteExtensionsEnableHeight?: bigint | undefined;
                } & Record<Exclude<keyof I["initChain"]["consensusParams"]["abci"], "voteExtensionsEnableHeight">, never>) | undefined;
            } & Record<Exclude<keyof I["initChain"]["consensusParams"], keyof ConsensusParams>, never>) | undefined;
            validators?: ({
                pubKey?: {
                    ed25519?: Uint8Array | undefined;
                    secp256k1?: Uint8Array | undefined;
                } | undefined;
                power?: bigint | undefined;
            }[] & ({
                pubKey?: {
                    ed25519?: Uint8Array | undefined;
                    secp256k1?: Uint8Array | undefined;
                } | undefined;
                power?: bigint | undefined;
            } & {
                pubKey?: ({
                    ed25519?: Uint8Array | undefined;
                    secp256k1?: Uint8Array | undefined;
                } & {
                    ed25519?: Uint8Array | undefined;
                    secp256k1?: Uint8Array | undefined;
                } & Record<Exclude<keyof I["initChain"]["validators"][number]["pubKey"], keyof PublicKey>, never>) | undefined;
                power?: bigint | undefined;
            } & Record<Exclude<keyof I["initChain"]["validators"][number], keyof ValidatorUpdate>, never>)[] & Record<Exclude<keyof I["initChain"]["validators"], keyof {
                pubKey?: {
                    ed25519?: Uint8Array | undefined;
                    secp256k1?: Uint8Array | undefined;
                } | undefined;
                power?: bigint | undefined;
            }[]>, never>) | undefined;
            appHash?: Uint8Array | undefined;
        } & Record<Exclude<keyof I["initChain"], keyof ResponseInitChain>, never>) | undefined;
        query?: ({
            code?: number | undefined;
            log?: string | undefined;
            info?: string | undefined;
            index?: bigint | undefined;
            key?: Uint8Array | undefined;
            value?: Uint8Array | undefined;
            proofOps?: {
                ops?: {
                    type?: string | undefined;
                    key?: Uint8Array | undefined;
                    data?: Uint8Array | undefined;
                }[] | undefined;
            } | undefined;
            height?: bigint | undefined;
            codespace?: string | undefined;
        } & {
            code?: number | undefined;
            log?: string | undefined;
            info?: string | undefined;
            index?: bigint | undefined;
            key?: Uint8Array | undefined;
            value?: Uint8Array | undefined;
            proofOps?: ({
                ops?: {
                    type?: string | undefined;
                    key?: Uint8Array | undefined;
                    data?: Uint8Array | undefined;
                }[] | undefined;
            } & {
                ops?: ({
                    type?: string | undefined;
                    key?: Uint8Array | undefined;
                    data?: Uint8Array | undefined;
                }[] & ({
                    type?: string | undefined;
                    key?: Uint8Array | undefined;
                    data?: Uint8Array | undefined;
                } & {
                    type?: string | undefined;
                    key?: Uint8Array | undefined;
                    data?: Uint8Array | undefined;
                } & Record<Exclude<keyof I["query"]["proofOps"]["ops"][number], keyof import("../crypto/proof").ProofOp>, never>)[] & Record<Exclude<keyof I["query"]["proofOps"]["ops"], keyof {
                    type?: string | undefined;
                    key?: Uint8Array | undefined;
                    data?: Uint8Array | undefined;
                }[]>, never>) | undefined;
            } & Record<Exclude<keyof I["query"]["proofOps"], "ops">, never>) | undefined;
            height?: bigint | undefined;
            codespace?: string | undefined;
        } & Record<Exclude<keyof I["query"], keyof ResponseQuery>, never>) | undefined;
        checkTx?: ({
            code?: number | undefined;
            data?: Uint8Array | undefined;
            log?: string | undefined;
            info?: string | undefined;
            gasWanted?: bigint | undefined;
            gasUsed?: bigint | undefined;
            events?: {
                type?: string | undefined;
                attributes?: {
                    key?: string | undefined;
                    value?: string | undefined;
                    index?: boolean | undefined;
                }[] | undefined;
            }[] | undefined;
            codespace?: string | undefined;
        } & {
            code?: number | undefined;
            data?: Uint8Array | undefined;
            log?: string | undefined;
            info?: string | undefined;
            gasWanted?: bigint | undefined;
            gasUsed?: bigint | undefined;
            events?: ({
                type?: string | undefined;
                attributes?: {
                    key?: string | undefined;
                    value?: string | undefined;
                    index?: boolean | undefined;
                }[] | undefined;
            }[] & ({
                type?: string | undefined;
                attributes?: {
                    key?: string | undefined;
                    value?: string | undefined;
                    index?: boolean | undefined;
                }[] | undefined;
            } & {
                type?: string | undefined;
                attributes?: ({
                    key?: string | undefined;
                    value?: string | undefined;
                    index?: boolean | undefined;
                }[] & ({
                    key?: string | undefined;
                    value?: string | undefined;
                    index?: boolean | undefined;
                } & {
                    key?: string | undefined;
                    value?: string | undefined;
                    index?: boolean | undefined;
                } & Record<Exclude<keyof I["checkTx"]["events"][number]["attributes"][number], keyof EventAttribute>, never>)[] & Record<Exclude<keyof I["checkTx"]["events"][number]["attributes"], keyof {
                    key?: string | undefined;
                    value?: string | undefined;
                    index?: boolean | undefined;
                }[]>, never>) | undefined;
            } & Record<Exclude<keyof I["checkTx"]["events"][number], keyof Event>, never>)[] & Record<Exclude<keyof I["checkTx"]["events"], keyof {
                type?: string | undefined;
                attributes?: {
                    key?: string | undefined;
                    value?: string | undefined;
                    index?: boolean | undefined;
                }[] | undefined;
            }[]>, never>) | undefined;
            codespace?: string | undefined;
        } & Record<Exclude<keyof I["checkTx"], keyof ResponseCheckTx>, never>) | undefined;
        commit?: ({
            retainHeight?: bigint | undefined;
        } & {
            retainHeight?: bigint | undefined;
        } & Record<Exclude<keyof I["commit"], "retainHeight">, never>) | undefined;
        listSnapshots?: ({
            snapshots?: {
                height?: bigint | undefined;
                format?: number | undefined;
                chunks?: number | undefined;
                hash?: Uint8Array | undefined;
                metadata?: Uint8Array | undefined;
            }[] | undefined;
        } & {
            snapshots?: ({
                height?: bigint | undefined;
                format?: number | undefined;
                chunks?: number | undefined;
                hash?: Uint8Array | undefined;
                metadata?: Uint8Array | undefined;
            }[] & ({
                height?: bigint | undefined;
                format?: number | undefined;
                chunks?: number | undefined;
                hash?: Uint8Array | undefined;
                metadata?: Uint8Array | undefined;
            } & {
                height?: bigint | undefined;
                format?: number | undefined;
                chunks?: number | undefined;
                hash?: Uint8Array | undefined;
                metadata?: Uint8Array | undefined;
            } & Record<Exclude<keyof I["listSnapshots"]["snapshots"][number], keyof Snapshot>, never>)[] & Record<Exclude<keyof I["listSnapshots"]["snapshots"], keyof {
                height?: bigint | undefined;
                format?: number | undefined;
                chunks?: number | undefined;
                hash?: Uint8Array | undefined;
                metadata?: Uint8Array | undefined;
            }[]>, never>) | undefined;
        } & Record<Exclude<keyof I["listSnapshots"], "snapshots">, never>) | undefined;
        offerSnapshot?: ({
            result?: ResponseOfferSnapshot_Result | undefined;
        } & {
            result?: ResponseOfferSnapshot_Result | undefined;
        } & Record<Exclude<keyof I["offerSnapshot"], "result">, never>) | undefined;
        loadSnapshotChunk?: ({
            chunk?: Uint8Array | undefined;
        } & {
            chunk?: Uint8Array | undefined;
        } & Record<Exclude<keyof I["loadSnapshotChunk"], "chunk">, never>) | undefined;
        applySnapshotChunk?: ({
            result?: ResponseApplySnapshotChunk_Result | undefined;
            refetchChunks?: number[] | undefined;
            rejectSenders?: string[] | undefined;
        } & {
            result?: ResponseApplySnapshotChunk_Result | undefined;
            refetchChunks?: (number[] & number[] & Record<Exclude<keyof I["applySnapshotChunk"]["refetchChunks"], keyof number[]>, never>) | undefined;
            rejectSenders?: (string[] & string[] & Record<Exclude<keyof I["applySnapshotChunk"]["rejectSenders"], keyof string[]>, never>) | undefined;
        } & Record<Exclude<keyof I["applySnapshotChunk"], keyof ResponseApplySnapshotChunk>, never>) | undefined;
        prepareProposal?: ({
            txs?: Uint8Array[] | undefined;
        } & {
            txs?: (Uint8Array[] & Uint8Array[] & Record<Exclude<keyof I["prepareProposal"]["txs"], keyof Uint8Array[]>, never>) | undefined;
        } & Record<Exclude<keyof I["prepareProposal"], "txs">, never>) | undefined;
        processProposal?: ({
            status?: ResponseProcessProposal_ProposalStatus | undefined;
        } & {
            status?: ResponseProcessProposal_ProposalStatus | undefined;
        } & Record<Exclude<keyof I["processProposal"], "status">, never>) | undefined;
        extendVote?: ({
            voteExtension?: Uint8Array | undefined;
        } & {
            voteExtension?: Uint8Array | undefined;
        } & Record<Exclude<keyof I["extendVote"], "voteExtension">, never>) | undefined;
        verifyVoteExtension?: ({
            status?: ResponseVerifyVoteExtension_VerifyStatus | undefined;
        } & {
            status?: ResponseVerifyVoteExtension_VerifyStatus | undefined;
        } & Record<Exclude<keyof I["verifyVoteExtension"], "status">, never>) | undefined;
        finalizeBlock?: ({
            events?: {
                type?: string | undefined;
                attributes?: {
                    key?: string | undefined;
                    value?: string | undefined;
                    index?: boolean | undefined;
                }[] | undefined;
            }[] | undefined;
            txResults?: {
                code?: number | undefined;
                data?: Uint8Array | undefined;
                log?: string | undefined;
                info?: string | undefined;
                gasWanted?: bigint | undefined;
                gasUsed?: bigint | undefined;
                events?: {
                    type?: string | undefined;
                    attributes?: {
                        key?: string | undefined;
                        value?: string | undefined;
                        index?: boolean | undefined;
                    }[] | undefined;
                }[] | undefined;
                codespace?: string | undefined;
            }[] | undefined;
            validatorUpdates?: {
                pubKey?: {
                    ed25519?: Uint8Array | undefined;
                    secp256k1?: Uint8Array | undefined;
                } | undefined;
                power?: bigint | undefined;
            }[] | undefined;
            consensusParamUpdates?: {
                block?: {
                    maxBytes?: bigint | undefined;
                    maxGas?: bigint | undefined;
                } | undefined;
                evidence?: {
                    maxAgeNumBlocks?: bigint | undefined;
                    maxAgeDuration?: {
                        seconds?: bigint | undefined;
                        nanos?: number | undefined;
                    } | undefined;
                    maxBytes?: bigint | undefined;
                } | undefined;
                validator?: {
                    pubKeyTypes?: string[] | undefined;
                } | undefined;
                version?: {
                    app?: bigint | undefined;
                } | undefined;
                abci?: {
                    voteExtensionsEnableHeight?: bigint | undefined;
                } | undefined;
            } | undefined;
            appHash?: Uint8Array | undefined;
        } & {
            events?: ({
                type?: string | undefined;
                attributes?: {
                    key?: string | undefined;
                    value?: string | undefined;
                    index?: boolean | undefined;
                }[] | undefined;
            }[] & ({
                type?: string | undefined;
                attributes?: {
                    key?: string | undefined;
                    value?: string | undefined;
                    index?: boolean | undefined;
                }[] | undefined;
            } & {
                type?: string | undefined;
                attributes?: ({
                    key?: string | undefined;
                    value?: string | undefined;
                    index?: boolean | undefined;
                }[] & ({
                    key?: string | undefined;
                    value?: string | undefined;
                    index?: boolean | undefined;
                } & {
                    key?: string | undefined;
                    value?: string | undefined;
                    index?: boolean | undefined;
                } & Record<Exclude<keyof I["finalizeBlock"]["events"][number]["attributes"][number], keyof EventAttribute>, never>)[] & Record<Exclude<keyof I["finalizeBlock"]["events"][number]["attributes"], keyof {
                    key?: string | undefined;
                    value?: string | undefined;
                    index?: boolean | undefined;
                }[]>, never>) | undefined;
            } & Record<Exclude<keyof I["finalizeBlock"]["events"][number], keyof Event>, never>)[] & Record<Exclude<keyof I["finalizeBlock"]["events"], keyof {
                type?: string | undefined;
                attributes?: {
                    key?: string | undefined;
                    value?: string | undefined;
                    index?: boolean | undefined;
                }[] | undefined;
            }[]>, never>) | undefined;
            txResults?: ({
                code?: number | undefined;
                data?: Uint8Array | undefined;
                log?: string | undefined;
                info?: string | undefined;
                gasWanted?: bigint | undefined;
                gasUsed?: bigint | undefined;
                events?: {
                    type?: string | undefined;
                    attributes?: {
                        key?: string | undefined;
                        value?: string | undefined;
                        index?: boolean | undefined;
                    }[] | undefined;
                }[] | undefined;
                codespace?: string | undefined;
            }[] & ({
                code?: number | undefined;
                data?: Uint8Array | undefined;
                log?: string | undefined;
                info?: string | undefined;
                gasWanted?: bigint | undefined;
                gasUsed?: bigint | undefined;
                events?: {
                    type?: string | undefined;
                    attributes?: {
                        key?: string | undefined;
                        value?: string | undefined;
                        index?: boolean | undefined;
                    }[] | undefined;
                }[] | undefined;
                codespace?: string | undefined;
            } & {
                code?: number | undefined;
                data?: Uint8Array | undefined;
                log?: string | undefined;
                info?: string | undefined;
                gasWanted?: bigint | undefined;
                gasUsed?: bigint | undefined;
                events?: ({
                    type?: string | undefined;
                    attributes?: {
                        key?: string | undefined;
                        value?: string | undefined;
                        index?: boolean | undefined;
                    }[] | undefined;
                }[] & ({
                    type?: string | undefined;
                    attributes?: {
                        key?: string | undefined;
                        value?: string | undefined;
                        index?: boolean | undefined;
                    }[] | undefined;
                } & {
                    type?: string | undefined;
                    attributes?: ({
                        key?: string | undefined;
                        value?: string | undefined;
                        index?: boolean | undefined;
                    }[] & ({
                        key?: string | undefined;
                        value?: string | undefined;
                        index?: boolean | undefined;
                    } & {
                        key?: string | undefined;
                        value?: string | undefined;
                        index?: boolean | undefined;
                    } & Record<Exclude<keyof I["finalizeBlock"]["txResults"][number]["events"][number]["attributes"][number], keyof EventAttribute>, never>)[] & Record<Exclude<keyof I["finalizeBlock"]["txResults"][number]["events"][number]["attributes"], keyof {
                        key?: string | undefined;
                        value?: string | undefined;
                        index?: boolean | undefined;
                    }[]>, never>) | undefined;
                } & Record<Exclude<keyof I["finalizeBlock"]["txResults"][number]["events"][number], keyof Event>, never>)[] & Record<Exclude<keyof I["finalizeBlock"]["txResults"][number]["events"], keyof {
                    type?: string | undefined;
                    attributes?: {
                        key?: string | undefined;
                        value?: string | undefined;
                        index?: boolean | undefined;
                    }[] | undefined;
                }[]>, never>) | undefined;
                codespace?: string | undefined;
            } & Record<Exclude<keyof I["finalizeBlock"]["txResults"][number], keyof ExecTxResult>, never>)[] & Record<Exclude<keyof I["finalizeBlock"]["txResults"], keyof {
                code?: number | undefined;
                data?: Uint8Array | undefined;
                log?: string | undefined;
                info?: string | undefined;
                gasWanted?: bigint | undefined;
                gasUsed?: bigint | undefined;
                events?: {
                    type?: string | undefined;
                    attributes?: {
                        key?: string | undefined;
                        value?: string | undefined;
                        index?: boolean | undefined;
                    }[] | undefined;
                }[] | undefined;
                codespace?: string | undefined;
            }[]>, never>) | undefined;
            validatorUpdates?: ({
                pubKey?: {
                    ed25519?: Uint8Array | undefined;
                    secp256k1?: Uint8Array | undefined;
                } | undefined;
                power?: bigint | undefined;
            }[] & ({
                pubKey?: {
                    ed25519?: Uint8Array | undefined;
                    secp256k1?: Uint8Array | undefined;
                } | undefined;
                power?: bigint | undefined;
            } & {
                pubKey?: ({
                    ed25519?: Uint8Array | undefined;
                    secp256k1?: Uint8Array | undefined;
                } & {
                    ed25519?: Uint8Array | undefined;
                    secp256k1?: Uint8Array | undefined;
                } & Record<Exclude<keyof I["finalizeBlock"]["validatorUpdates"][number]["pubKey"], keyof PublicKey>, never>) | undefined;
                power?: bigint | undefined;
            } & Record<Exclude<keyof I["finalizeBlock"]["validatorUpdates"][number], keyof ValidatorUpdate>, never>)[] & Record<Exclude<keyof I["finalizeBlock"]["validatorUpdates"], keyof {
                pubKey?: {
                    ed25519?: Uint8Array | undefined;
                    secp256k1?: Uint8Array | undefined;
                } | undefined;
                power?: bigint | undefined;
            }[]>, never>) | undefined;
            consensusParamUpdates?: ({
                block?: {
                    maxBytes?: bigint | undefined;
                    maxGas?: bigint | undefined;
                } | undefined;
                evidence?: {
                    maxAgeNumBlocks?: bigint | undefined;
                    maxAgeDuration?: {
                        seconds?: bigint | undefined;
                        nanos?: number | undefined;
                    } | undefined;
                    maxBytes?: bigint | undefined;
                } | undefined;
                validator?: {
                    pubKeyTypes?: string[] | undefined;
                } | undefined;
                version?: {
                    app?: bigint | undefined;
                } | undefined;
                abci?: {
                    voteExtensionsEnableHeight?: bigint | undefined;
                } | undefined;
            } & {
                block?: ({
                    maxBytes?: bigint | undefined;
                    maxGas?: bigint | undefined;
                } & {
                    maxBytes?: bigint | undefined;
                    maxGas?: bigint | undefined;
                } & Record<Exclude<keyof I["finalizeBlock"]["consensusParamUpdates"]["block"], keyof import("../types/params").BlockParams>, never>) | undefined;
                evidence?: ({
                    maxAgeNumBlocks?: bigint | undefined;
                    maxAgeDuration?: {
                        seconds?: bigint | undefined;
                        nanos?: number | undefined;
                    } | undefined;
                    maxBytes?: bigint | undefined;
                } & {
                    maxAgeNumBlocks?: bigint | undefined;
                    maxAgeDuration?: ({
                        seconds?: bigint | undefined;
                        nanos?: number | undefined;
                    } & {
                        seconds?: bigint | undefined;
                        nanos?: number | undefined;
                    } & Record<Exclude<keyof I["finalizeBlock"]["consensusParamUpdates"]["evidence"]["maxAgeDuration"], keyof import("../../google/protobuf/duration").Duration>, never>) | undefined;
                    maxBytes?: bigint | undefined;
                } & Record<Exclude<keyof I["finalizeBlock"]["consensusParamUpdates"]["evidence"], keyof import("../types/params").EvidenceParams>, never>) | undefined;
                validator?: ({
                    pubKeyTypes?: string[] | undefined;
                } & {
                    pubKeyTypes?: (string[] & string[] & Record<Exclude<keyof I["finalizeBlock"]["consensusParamUpdates"]["validator"]["pubKeyTypes"], keyof string[]>, never>) | undefined;
                } & Record<Exclude<keyof I["finalizeBlock"]["consensusParamUpdates"]["validator"], "pubKeyTypes">, never>) | undefined;
                version?: ({
                    app?: bigint | undefined;
                } & {
                    app?: bigint | undefined;
                } & Record<Exclude<keyof I["finalizeBlock"]["consensusParamUpdates"]["version"], "app">, never>) | undefined;
                abci?: ({
                    voteExtensionsEnableHeight?: bigint | undefined;
                } & {
                    voteExtensionsEnableHeight?: bigint | undefined;
                } & Record<Exclude<keyof I["finalizeBlock"]["consensusParamUpdates"]["abci"], "voteExtensionsEnableHeight">, never>) | undefined;
            } & Record<Exclude<keyof I["finalizeBlock"]["consensusParamUpdates"], keyof ConsensusParams>, never>) | undefined;
            appHash?: Uint8Array | undefined;
        } & Record<Exclude<keyof I["finalizeBlock"], keyof ResponseFinalizeBlock>, never>) | undefined;
    } & Record<Exclude<keyof I, keyof Response>, never>>(object: I): Response;
};
export declare const ResponseException: {
    typeUrl: string;
    encode(message: ResponseException, writer?: BinaryWriter): BinaryWriter;
    decode(input: BinaryReader | Uint8Array, length?: number): ResponseException;
    fromJSON(object: any): ResponseException;
    toJSON(message: ResponseException): JsonSafe<ResponseException>;
    fromPartial<I extends {
        error?: string | undefined;
    } & {
        error?: string | undefined;
    } & Record<Exclude<keyof I, "error">, never>>(object: I): ResponseException;
};
export declare const ResponseEcho: {
    typeUrl: string;
    encode(message: ResponseEcho, writer?: BinaryWriter): BinaryWriter;
    decode(input: BinaryReader | Uint8Array, length?: number): ResponseEcho;
    fromJSON(object: any): ResponseEcho;
    toJSON(message: ResponseEcho): JsonSafe<ResponseEcho>;
    fromPartial<I extends {
        message?: string | undefined;
    } & {
        message?: string | undefined;
    } & Record<Exclude<keyof I, "message">, never>>(object: I): ResponseEcho;
};
export declare const ResponseFlush: {
    typeUrl: string;
    encode(_: ResponseFlush, writer?: BinaryWriter): BinaryWriter;
    decode(input: BinaryReader | Uint8Array, length?: number): ResponseFlush;
    fromJSON(_: any): ResponseFlush;
    toJSON(_: ResponseFlush): JsonSafe<ResponseFlush>;
    fromPartial<I extends {} & {} & Record<Exclude<keyof I, never>, never>>(_: I): ResponseFlush;
};
export declare const ResponseInfo: {
    typeUrl: string;
    encode(message: ResponseInfo, writer?: BinaryWriter): BinaryWriter;
    decode(input: BinaryReader | Uint8Array, length?: number): ResponseInfo;
    fromJSON(object: any): ResponseInfo;
    toJSON(message: ResponseInfo): JsonSafe<ResponseInfo>;
    fromPartial<I extends {
        data?: string | undefined;
        version?: string | undefined;
        appVersion?: bigint | undefined;
        lastBlockHeight?: bigint | undefined;
        lastBlockAppHash?: Uint8Array | undefined;
    } & {
        data?: string | undefined;
        version?: string | undefined;
        appVersion?: bigint | undefined;
        lastBlockHeight?: bigint | undefined;
        lastBlockAppHash?: Uint8Array | undefined;
    } & Record<Exclude<keyof I, keyof ResponseInfo>, never>>(object: I): ResponseInfo;
};
export declare const ResponseInitChain: {
    typeUrl: string;
    encode(message: ResponseInitChain, writer?: BinaryWriter): BinaryWriter;
    decode(input: BinaryReader | Uint8Array, length?: number): ResponseInitChain;
    fromJSON(object: any): ResponseInitChain;
    toJSON(message: ResponseInitChain): JsonSafe<ResponseInitChain>;
    fromPartial<I extends {
        consensusParams?: {
            block?: {
                maxBytes?: bigint | undefined;
                maxGas?: bigint | undefined;
            } | undefined;
            evidence?: {
                maxAgeNumBlocks?: bigint | undefined;
                maxAgeDuration?: {
                    seconds?: bigint | undefined;
                    nanos?: number | undefined;
                } | undefined;
                maxBytes?: bigint | undefined;
            } | undefined;
            validator?: {
                pubKeyTypes?: string[] | undefined;
            } | undefined;
            version?: {
                app?: bigint | undefined;
            } | undefined;
            abci?: {
                voteExtensionsEnableHeight?: bigint | undefined;
            } | undefined;
        } | undefined;
        validators?: {
            pubKey?: {
                ed25519?: Uint8Array | undefined;
                secp256k1?: Uint8Array | undefined;
            } | undefined;
            power?: bigint | undefined;
        }[] | undefined;
        appHash?: Uint8Array | undefined;
    } & {
        consensusParams?: ({
            block?: {
                maxBytes?: bigint | undefined;
                maxGas?: bigint | undefined;
            } | undefined;
            evidence?: {
                maxAgeNumBlocks?: bigint | undefined;
                maxAgeDuration?: {
                    seconds?: bigint | undefined;
                    nanos?: number | undefined;
                } | undefined;
                maxBytes?: bigint | undefined;
            } | undefined;
            validator?: {
                pubKeyTypes?: string[] | undefined;
            } | undefined;
            version?: {
                app?: bigint | undefined;
            } | undefined;
            abci?: {
                voteExtensionsEnableHeight?: bigint | undefined;
            } | undefined;
        } & {
            block?: ({
                maxBytes?: bigint | undefined;
                maxGas?: bigint | undefined;
            } & {
                maxBytes?: bigint | undefined;
                maxGas?: bigint | undefined;
            } & Record<Exclude<keyof I["consensusParams"]["block"], keyof import("../types/params").BlockParams>, never>) | undefined;
            evidence?: ({
                maxAgeNumBlocks?: bigint | undefined;
                maxAgeDuration?: {
                    seconds?: bigint | undefined;
                    nanos?: number | undefined;
                } | undefined;
                maxBytes?: bigint | undefined;
            } & {
                maxAgeNumBlocks?: bigint | undefined;
                maxAgeDuration?: ({
                    seconds?: bigint | undefined;
                    nanos?: number | undefined;
                } & {
                    seconds?: bigint | undefined;
                    nanos?: number | undefined;
                } & Record<Exclude<keyof I["consensusParams"]["evidence"]["maxAgeDuration"], keyof import("../../google/protobuf/duration").Duration>, never>) | undefined;
                maxBytes?: bigint | undefined;
            } & Record<Exclude<keyof I["consensusParams"]["evidence"], keyof import("../types/params").EvidenceParams>, never>) | undefined;
            validator?: ({
                pubKeyTypes?: string[] | undefined;
            } & {
                pubKeyTypes?: (string[] & string[] & Record<Exclude<keyof I["consensusParams"]["validator"]["pubKeyTypes"], keyof string[]>, never>) | undefined;
            } & Record<Exclude<keyof I["consensusParams"]["validator"], "pubKeyTypes">, never>) | undefined;
            version?: ({
                app?: bigint | undefined;
            } & {
                app?: bigint | undefined;
            } & Record<Exclude<keyof I["consensusParams"]["version"], "app">, never>) | undefined;
            abci?: ({
                voteExtensionsEnableHeight?: bigint | undefined;
            } & {
                voteExtensionsEnableHeight?: bigint | undefined;
            } & Record<Exclude<keyof I["consensusParams"]["abci"], "voteExtensionsEnableHeight">, never>) | undefined;
        } & Record<Exclude<keyof I["consensusParams"], keyof ConsensusParams>, never>) | undefined;
        validators?: ({
            pubKey?: {
                ed25519?: Uint8Array | undefined;
                secp256k1?: Uint8Array | undefined;
            } | undefined;
            power?: bigint | undefined;
        }[] & ({
            pubKey?: {
                ed25519?: Uint8Array | undefined;
                secp256k1?: Uint8Array | undefined;
            } | undefined;
            power?: bigint | undefined;
        } & {
            pubKey?: ({
                ed25519?: Uint8Array | undefined;
                secp256k1?: Uint8Array | undefined;
            } & {
                ed25519?: Uint8Array | undefined;
                secp256k1?: Uint8Array | undefined;
            } & Record<Exclude<keyof I["validators"][number]["pubKey"], keyof PublicKey>, never>) | undefined;
            power?: bigint | undefined;
        } & Record<Exclude<keyof I["validators"][number], keyof ValidatorUpdate>, never>)[] & Record<Exclude<keyof I["validators"], keyof {
            pubKey?: {
                ed25519?: Uint8Array | undefined;
                secp256k1?: Uint8Array | undefined;
            } | undefined;
            power?: bigint | undefined;
        }[]>, never>) | undefined;
        appHash?: Uint8Array | undefined;
    } & Record<Exclude<keyof I, keyof ResponseInitChain>, never>>(object: I): ResponseInitChain;
};
export declare const ResponseQuery: {
    typeUrl: string;
    encode(message: ResponseQuery, writer?: BinaryWriter): BinaryWriter;
    decode(input: BinaryReader | Uint8Array, length?: number): ResponseQuery;
    fromJSON(object: any): ResponseQuery;
    toJSON(message: ResponseQuery): JsonSafe<ResponseQuery>;
    fromPartial<I extends {
        code?: number | undefined;
        log?: string | undefined;
        info?: string | undefined;
        index?: bigint | undefined;
        key?: Uint8Array | undefined;
        value?: Uint8Array | undefined;
        proofOps?: {
            ops?: {
                type?: string | undefined;
                key?: Uint8Array | undefined;
                data?: Uint8Array | undefined;
            }[] | undefined;
        } | undefined;
        height?: bigint | undefined;
        codespace?: string | undefined;
    } & {
        code?: number | undefined;
        log?: string | undefined;
        info?: string | undefined;
        index?: bigint | undefined;
        key?: Uint8Array | undefined;
        value?: Uint8Array | undefined;
        proofOps?: ({
            ops?: {
                type?: string | undefined;
                key?: Uint8Array | undefined;
                data?: Uint8Array | undefined;
            }[] | undefined;
        } & {
            ops?: ({
                type?: string | undefined;
                key?: Uint8Array | undefined;
                data?: Uint8Array | undefined;
            }[] & ({
                type?: string | undefined;
                key?: Uint8Array | undefined;
                data?: Uint8Array | undefined;
            } & {
                type?: string | undefined;
                key?: Uint8Array | undefined;
                data?: Uint8Array | undefined;
            } & Record<Exclude<keyof I["proofOps"]["ops"][number], keyof import("../crypto/proof").ProofOp>, never>)[] & Record<Exclude<keyof I["proofOps"]["ops"], keyof {
                type?: string | undefined;
                key?: Uint8Array | undefined;
                data?: Uint8Array | undefined;
            }[]>, never>) | undefined;
        } & Record<Exclude<keyof I["proofOps"], "ops">, never>) | undefined;
        height?: bigint | undefined;
        codespace?: string | undefined;
    } & Record<Exclude<keyof I, keyof ResponseQuery>, never>>(object: I): ResponseQuery;
};
export declare const ResponseCheckTx: {
    typeUrl: string;
    encode(message: ResponseCheckTx, writer?: BinaryWriter): BinaryWriter;
    decode(input: BinaryReader | Uint8Array, length?: number): ResponseCheckTx;
    fromJSON(object: any): ResponseCheckTx;
    toJSON(message: ResponseCheckTx): JsonSafe<ResponseCheckTx>;
    fromPartial<I extends {
        code?: number | undefined;
        data?: Uint8Array | undefined;
        log?: string | undefined;
        info?: string | undefined;
        gasWanted?: bigint | undefined;
        gasUsed?: bigint | undefined;
        events?: {
            type?: string | undefined;
            attributes?: {
                key?: string | undefined;
                value?: string | undefined;
                index?: boolean | undefined;
            }[] | undefined;
        }[] | undefined;
        codespace?: string | undefined;
    } & {
        code?: number | undefined;
        data?: Uint8Array | undefined;
        log?: string | undefined;
        info?: string | undefined;
        gasWanted?: bigint | undefined;
        gasUsed?: bigint | undefined;
        events?: ({
            type?: string | undefined;
            attributes?: {
                key?: string | undefined;
                value?: string | undefined;
                index?: boolean | undefined;
            }[] | undefined;
        }[] & ({
            type?: string | undefined;
            attributes?: {
                key?: string | undefined;
                value?: string | undefined;
                index?: boolean | undefined;
            }[] | undefined;
        } & {
            type?: string | undefined;
            attributes?: ({
                key?: string | undefined;
                value?: string | undefined;
                index?: boolean | undefined;
            }[] & ({
                key?: string | undefined;
                value?: string | undefined;
                index?: boolean | undefined;
            } & {
                key?: string | undefined;
                value?: string | undefined;
                index?: boolean | undefined;
            } & Record<Exclude<keyof I["events"][number]["attributes"][number], keyof EventAttribute>, never>)[] & Record<Exclude<keyof I["events"][number]["attributes"], keyof {
                key?: string | undefined;
                value?: string | undefined;
                index?: boolean | undefined;
            }[]>, never>) | undefined;
        } & Record<Exclude<keyof I["events"][number], keyof Event>, never>)[] & Record<Exclude<keyof I["events"], keyof {
            type?: string | undefined;
            attributes?: {
                key?: string | undefined;
                value?: string | undefined;
                index?: boolean | undefined;
            }[] | undefined;
        }[]>, never>) | undefined;
        codespace?: string | undefined;
    } & Record<Exclude<keyof I, keyof ResponseCheckTx>, never>>(object: I): ResponseCheckTx;
};
export declare const ResponseCommit: {
    typeUrl: string;
    encode(message: ResponseCommit, writer?: BinaryWriter): BinaryWriter;
    decode(input: BinaryReader | Uint8Array, length?: number): ResponseCommit;
    fromJSON(object: any): ResponseCommit;
    toJSON(message: ResponseCommit): JsonSafe<ResponseCommit>;
    fromPartial<I extends {
        retainHeight?: bigint | undefined;
    } & {
        retainHeight?: bigint | undefined;
    } & Record<Exclude<keyof I, "retainHeight">, never>>(object: I): ResponseCommit;
};
export declare const ResponseListSnapshots: {
    typeUrl: string;
    encode(message: ResponseListSnapshots, writer?: BinaryWriter): BinaryWriter;
    decode(input: BinaryReader | Uint8Array, length?: number): ResponseListSnapshots;
    fromJSON(object: any): ResponseListSnapshots;
    toJSON(message: ResponseListSnapshots): JsonSafe<ResponseListSnapshots>;
    fromPartial<I extends {
        snapshots?: {
            height?: bigint | undefined;
            format?: number | undefined;
            chunks?: number | undefined;
            hash?: Uint8Array | undefined;
            metadata?: Uint8Array | undefined;
        }[] | undefined;
    } & {
        snapshots?: ({
            height?: bigint | undefined;
            format?: number | undefined;
            chunks?: number | undefined;
            hash?: Uint8Array | undefined;
            metadata?: Uint8Array | undefined;
        }[] & ({
            height?: bigint | undefined;
            format?: number | undefined;
            chunks?: number | undefined;
            hash?: Uint8Array | undefined;
            metadata?: Uint8Array | undefined;
        } & {
            height?: bigint | undefined;
            format?: number | undefined;
            chunks?: number | undefined;
            hash?: Uint8Array | undefined;
            metadata?: Uint8Array | undefined;
        } & Record<Exclude<keyof I["snapshots"][number], keyof Snapshot>, never>)[] & Record<Exclude<keyof I["snapshots"], keyof {
            height?: bigint | undefined;
            format?: number | undefined;
            chunks?: number | undefined;
            hash?: Uint8Array | undefined;
            metadata?: Uint8Array | undefined;
        }[]>, never>) | undefined;
    } & Record<Exclude<keyof I, "snapshots">, never>>(object: I): ResponseListSnapshots;
};
export declare const ResponseOfferSnapshot: {
    typeUrl: string;
    encode(message: ResponseOfferSnapshot, writer?: BinaryWriter): BinaryWriter;
    decode(input: BinaryReader | Uint8Array, length?: number): ResponseOfferSnapshot;
    fromJSON(object: any): ResponseOfferSnapshot;
    toJSON(message: ResponseOfferSnapshot): JsonSafe<ResponseOfferSnapshot>;
    fromPartial<I extends {
        result?: ResponseOfferSnapshot_Result | undefined;
    } & {
        result?: ResponseOfferSnapshot_Result | undefined;
    } & Record<Exclude<keyof I, "result">, never>>(object: I): ResponseOfferSnapshot;
};
export declare const ResponseLoadSnapshotChunk: {
    typeUrl: string;
    encode(message: ResponseLoadSnapshotChunk, writer?: BinaryWriter): BinaryWriter;
    decode(input: BinaryReader | Uint8Array, length?: number): ResponseLoadSnapshotChunk;
    fromJSON(object: any): ResponseLoadSnapshotChunk;
    toJSON(message: ResponseLoadSnapshotChunk): JsonSafe<ResponseLoadSnapshotChunk>;
    fromPartial<I extends {
        chunk?: Uint8Array | undefined;
    } & {
        chunk?: Uint8Array | undefined;
    } & Record<Exclude<keyof I, "chunk">, never>>(object: I): ResponseLoadSnapshotChunk;
};
export declare const ResponseApplySnapshotChunk: {
    typeUrl: string;
    encode(message: ResponseApplySnapshotChunk, writer?: BinaryWriter): BinaryWriter;
    decode(input: BinaryReader | Uint8Array, length?: number): ResponseApplySnapshotChunk;
    fromJSON(object: any): ResponseApplySnapshotChunk;
    toJSON(message: ResponseApplySnapshotChunk): JsonSafe<ResponseApplySnapshotChunk>;
    fromPartial<I extends {
        result?: ResponseApplySnapshotChunk_Result | undefined;
        refetchChunks?: number[] | undefined;
        rejectSenders?: string[] | undefined;
    } & {
        result?: ResponseApplySnapshotChunk_Result | undefined;
        refetchChunks?: (number[] & number[] & Record<Exclude<keyof I["refetchChunks"], keyof number[]>, never>) | undefined;
        rejectSenders?: (string[] & string[] & Record<Exclude<keyof I["rejectSenders"], keyof string[]>, never>) | undefined;
    } & Record<Exclude<keyof I, keyof ResponseApplySnapshotChunk>, never>>(object: I): ResponseApplySnapshotChunk;
};
export declare const ResponsePrepareProposal: {
    typeUrl: string;
    encode(message: ResponsePrepareProposal, writer?: BinaryWriter): BinaryWriter;
    decode(input: BinaryReader | Uint8Array, length?: number): ResponsePrepareProposal;
    fromJSON(object: any): ResponsePrepareProposal;
    toJSON(message: ResponsePrepareProposal): JsonSafe<ResponsePrepareProposal>;
    fromPartial<I extends {
        txs?: Uint8Array[] | undefined;
    } & {
        txs?: (Uint8Array[] & Uint8Array[] & Record<Exclude<keyof I["txs"], keyof Uint8Array[]>, never>) | undefined;
    } & Record<Exclude<keyof I, "txs">, never>>(object: I): ResponsePrepareProposal;
};
export declare const ResponseProcessProposal: {
    typeUrl: string;
    encode(message: ResponseProcessProposal, writer?: BinaryWriter): BinaryWriter;
    decode(input: BinaryReader | Uint8Array, length?: number): ResponseProcessProposal;
    fromJSON(object: any): ResponseProcessProposal;
    toJSON(message: ResponseProcessProposal): JsonSafe<ResponseProcessProposal>;
    fromPartial<I extends {
        status?: ResponseProcessProposal_ProposalStatus | undefined;
    } & {
        status?: ResponseProcessProposal_ProposalStatus | undefined;
    } & Record<Exclude<keyof I, "status">, never>>(object: I): ResponseProcessProposal;
};
export declare const ResponseExtendVote: {
    typeUrl: string;
    encode(message: ResponseExtendVote, writer?: BinaryWriter): BinaryWriter;
    decode(input: BinaryReader | Uint8Array, length?: number): ResponseExtendVote;
    fromJSON(object: any): ResponseExtendVote;
    toJSON(message: ResponseExtendVote): JsonSafe<ResponseExtendVote>;
    fromPartial<I extends {
        voteExtension?: Uint8Array | undefined;
    } & {
        voteExtension?: Uint8Array | undefined;
    } & Record<Exclude<keyof I, "voteExtension">, never>>(object: I): ResponseExtendVote;
};
export declare const ResponseVerifyVoteExtension: {
    typeUrl: string;
    encode(message: ResponseVerifyVoteExtension, writer?: BinaryWriter): BinaryWriter;
    decode(input: BinaryReader | Uint8Array, length?: number): ResponseVerifyVoteExtension;
    fromJSON(object: any): ResponseVerifyVoteExtension;
    toJSON(message: ResponseVerifyVoteExtension): JsonSafe<ResponseVerifyVoteExtension>;
    fromPartial<I extends {
        status?: ResponseVerifyVoteExtension_VerifyStatus | undefined;
    } & {
        status?: ResponseVerifyVoteExtension_VerifyStatus | undefined;
    } & Record<Exclude<keyof I, "status">, never>>(object: I): ResponseVerifyVoteExtension;
};
export declare const ResponseFinalizeBlock: {
    typeUrl: string;
    encode(message: ResponseFinalizeBlock, writer?: BinaryWriter): BinaryWriter;
    decode(input: BinaryReader | Uint8Array, length?: number): ResponseFinalizeBlock;
    fromJSON(object: any): ResponseFinalizeBlock;
    toJSON(message: ResponseFinalizeBlock): JsonSafe<ResponseFinalizeBlock>;
    fromPartial<I extends {
        events?: {
            type?: string | undefined;
            attributes?: {
                key?: string | undefined;
                value?: string | undefined;
                index?: boolean | undefined;
            }[] | undefined;
        }[] | undefined;
        txResults?: {
            code?: number | undefined;
            data?: Uint8Array | undefined;
            log?: string | undefined;
            info?: string | undefined;
            gasWanted?: bigint | undefined;
            gasUsed?: bigint | undefined;
            events?: {
                type?: string | undefined;
                attributes?: {
                    key?: string | undefined;
                    value?: string | undefined;
                    index?: boolean | undefined;
                }[] | undefined;
            }[] | undefined;
            codespace?: string | undefined;
        }[] | undefined;
        validatorUpdates?: {
            pubKey?: {
                ed25519?: Uint8Array | undefined;
                secp256k1?: Uint8Array | undefined;
            } | undefined;
            power?: bigint | undefined;
        }[] | undefined;
        consensusParamUpdates?: {
            block?: {
                maxBytes?: bigint | undefined;
                maxGas?: bigint | undefined;
            } | undefined;
            evidence?: {
                maxAgeNumBlocks?: bigint | undefined;
                maxAgeDuration?: {
                    seconds?: bigint | undefined;
                    nanos?: number | undefined;
                } | undefined;
                maxBytes?: bigint | undefined;
            } | undefined;
            validator?: {
                pubKeyTypes?: string[] | undefined;
            } | undefined;
            version?: {
                app?: bigint | undefined;
            } | undefined;
            abci?: {
                voteExtensionsEnableHeight?: bigint | undefined;
            } | undefined;
        } | undefined;
        appHash?: Uint8Array | undefined;
    } & {
        events?: ({
            type?: string | undefined;
            attributes?: {
                key?: string | undefined;
                value?: string | undefined;
                index?: boolean | undefined;
            }[] | undefined;
        }[] & ({
            type?: string | undefined;
            attributes?: {
                key?: string | undefined;
                value?: string | undefined;
                index?: boolean | undefined;
            }[] | undefined;
        } & {
            type?: string | undefined;
            attributes?: ({
                key?: string | undefined;
                value?: string | undefined;
                index?: boolean | undefined;
            }[] & ({
                key?: string | undefined;
                value?: string | undefined;
                index?: boolean | undefined;
            } & {
                key?: string | undefined;
                value?: string | undefined;
                index?: boolean | undefined;
            } & Record<Exclude<keyof I["events"][number]["attributes"][number], keyof EventAttribute>, never>)[] & Record<Exclude<keyof I["events"][number]["attributes"], keyof {
                key?: string | undefined;
                value?: string | undefined;
                index?: boolean | undefined;
            }[]>, never>) | undefined;
        } & Record<Exclude<keyof I["events"][number], keyof Event>, never>)[] & Record<Exclude<keyof I["events"], keyof {
            type?: string | undefined;
            attributes?: {
                key?: string | undefined;
                value?: string | undefined;
                index?: boolean | undefined;
            }[] | undefined;
        }[]>, never>) | undefined;
        txResults?: ({
            code?: number | undefined;
            data?: Uint8Array | undefined;
            log?: string | undefined;
            info?: string | undefined;
            gasWanted?: bigint | undefined;
            gasUsed?: bigint | undefined;
            events?: {
                type?: string | undefined;
                attributes?: {
                    key?: string | undefined;
                    value?: string | undefined;
                    index?: boolean | undefined;
                }[] | undefined;
            }[] | undefined;
            codespace?: string | undefined;
        }[] & ({
            code?: number | undefined;
            data?: Uint8Array | undefined;
            log?: string | undefined;
            info?: string | undefined;
            gasWanted?: bigint | undefined;
            gasUsed?: bigint | undefined;
            events?: {
                type?: string | undefined;
                attributes?: {
                    key?: string | undefined;
                    value?: string | undefined;
                    index?: boolean | undefined;
                }[] | undefined;
            }[] | undefined;
            codespace?: string | undefined;
        } & {
            code?: number | undefined;
            data?: Uint8Array | undefined;
            log?: string | undefined;
            info?: string | undefined;
            gasWanted?: bigint | undefined;
            gasUsed?: bigint | undefined;
            events?: ({
                type?: string | undefined;
                attributes?: {
                    key?: string | undefined;
                    value?: string | undefined;
                    index?: boolean | undefined;
                }[] | undefined;
            }[] & ({
                type?: string | undefined;
                attributes?: {
                    key?: string | undefined;
                    value?: string | undefined;
                    index?: boolean | undefined;
                }[] | undefined;
            } & {
                type?: string | undefined;
                attributes?: ({
                    key?: string | undefined;
                    value?: string | undefined;
                    index?: boolean | undefined;
                }[] & ({
                    key?: string | undefined;
                    value?: string | undefined;
                    index?: boolean | undefined;
                } & {
                    key?: string | undefined;
                    value?: string | undefined;
                    index?: boolean | undefined;
                } & Record<Exclude<keyof I["txResults"][number]["events"][number]["attributes"][number], keyof EventAttribute>, never>)[] & Record<Exclude<keyof I["txResults"][number]["events"][number]["attributes"], keyof {
                    key?: string | undefined;
                    value?: string | undefined;
                    index?: boolean | undefined;
                }[]>, never>) | undefined;
            } & Record<Exclude<keyof I["txResults"][number]["events"][number], keyof Event>, never>)[] & Record<Exclude<keyof I["txResults"][number]["events"], keyof {
                type?: string | undefined;
                attributes?: {
                    key?: string | undefined;
                    value?: string | undefined;
                    index?: boolean | undefined;
                }[] | undefined;
            }[]>, never>) | undefined;
            codespace?: string | undefined;
        } & Record<Exclude<keyof I["txResults"][number], keyof ExecTxResult>, never>)[] & Record<Exclude<keyof I["txResults"], keyof {
            code?: number | undefined;
            data?: Uint8Array | undefined;
            log?: string | undefined;
            info?: string | undefined;
            gasWanted?: bigint | undefined;
            gasUsed?: bigint | undefined;
            events?: {
                type?: string | undefined;
                attributes?: {
                    key?: string | undefined;
                    value?: string | undefined;
                    index?: boolean | undefined;
                }[] | undefined;
            }[] | undefined;
            codespace?: string | undefined;
        }[]>, never>) | undefined;
        validatorUpdates?: ({
            pubKey?: {
                ed25519?: Uint8Array | undefined;
                secp256k1?: Uint8Array | undefined;
            } | undefined;
            power?: bigint | undefined;
        }[] & ({
            pubKey?: {
                ed25519?: Uint8Array | undefined;
                secp256k1?: Uint8Array | undefined;
            } | undefined;
            power?: bigint | undefined;
        } & {
            pubKey?: ({
                ed25519?: Uint8Array | undefined;
                secp256k1?: Uint8Array | undefined;
            } & {
                ed25519?: Uint8Array | undefined;
                secp256k1?: Uint8Array | undefined;
            } & Record<Exclude<keyof I["validatorUpdates"][number]["pubKey"], keyof PublicKey>, never>) | undefined;
            power?: bigint | undefined;
        } & Record<Exclude<keyof I["validatorUpdates"][number], keyof ValidatorUpdate>, never>)[] & Record<Exclude<keyof I["validatorUpdates"], keyof {
            pubKey?: {
                ed25519?: Uint8Array | undefined;
                secp256k1?: Uint8Array | undefined;
            } | undefined;
            power?: bigint | undefined;
        }[]>, never>) | undefined;
        consensusParamUpdates?: ({
            block?: {
                maxBytes?: bigint | undefined;
                maxGas?: bigint | undefined;
            } | undefined;
            evidence?: {
                maxAgeNumBlocks?: bigint | undefined;
                maxAgeDuration?: {
                    seconds?: bigint | undefined;
                    nanos?: number | undefined;
                } | undefined;
                maxBytes?: bigint | undefined;
            } | undefined;
            validator?: {
                pubKeyTypes?: string[] | undefined;
            } | undefined;
            version?: {
                app?: bigint | undefined;
            } | undefined;
            abci?: {
                voteExtensionsEnableHeight?: bigint | undefined;
            } | undefined;
        } & {
            block?: ({
                maxBytes?: bigint | undefined;
                maxGas?: bigint | undefined;
            } & {
                maxBytes?: bigint | undefined;
                maxGas?: bigint | undefined;
            } & Record<Exclude<keyof I["consensusParamUpdates"]["block"], keyof import("../types/params").BlockParams>, never>) | undefined;
            evidence?: ({
                maxAgeNumBlocks?: bigint | undefined;
                maxAgeDuration?: {
                    seconds?: bigint | undefined;
                    nanos?: number | undefined;
                } | undefined;
                maxBytes?: bigint | undefined;
            } & {
                maxAgeNumBlocks?: bigint | undefined;
                maxAgeDuration?: ({
                    seconds?: bigint | undefined;
                    nanos?: number | undefined;
                } & {
                    seconds?: bigint | undefined;
                    nanos?: number | undefined;
                } & Record<Exclude<keyof I["consensusParamUpdates"]["evidence"]["maxAgeDuration"], keyof import("../../google/protobuf/duration").Duration>, never>) | undefined;
                maxBytes?: bigint | undefined;
            } & Record<Exclude<keyof I["consensusParamUpdates"]["evidence"], keyof import("../types/params").EvidenceParams>, never>) | undefined;
            validator?: ({
                pubKeyTypes?: string[] | undefined;
            } & {
                pubKeyTypes?: (string[] & string[] & Record<Exclude<keyof I["consensusParamUpdates"]["validator"]["pubKeyTypes"], keyof string[]>, never>) | undefined;
            } & Record<Exclude<keyof I["consensusParamUpdates"]["validator"], "pubKeyTypes">, never>) | undefined;
            version?: ({
                app?: bigint | undefined;
            } & {
                app?: bigint | undefined;
            } & Record<Exclude<keyof I["consensusParamUpdates"]["version"], "app">, never>) | undefined;
            abci?: ({
                voteExtensionsEnableHeight?: bigint | undefined;
            } & {
                voteExtensionsEnableHeight?: bigint | undefined;
            } & Record<Exclude<keyof I["consensusParamUpdates"]["abci"], "voteExtensionsEnableHeight">, never>) | undefined;
        } & Record<Exclude<keyof I["consensusParamUpdates"], keyof ConsensusParams>, never>) | undefined;
        appHash?: Uint8Array | undefined;
    } & Record<Exclude<keyof I, keyof ResponseFinalizeBlock>, never>>(object: I): ResponseFinalizeBlock;
};
export declare const CommitInfo: {
    typeUrl: string;
    encode(message: CommitInfo, writer?: BinaryWriter): BinaryWriter;
    decode(input: BinaryReader | Uint8Array, length?: number): CommitInfo;
    fromJSON(object: any): CommitInfo;
    toJSON(message: CommitInfo): JsonSafe<CommitInfo>;
    fromPartial<I extends {
        round?: number | undefined;
        votes?: {
            validator?: {
                address?: Uint8Array | undefined;
                power?: bigint | undefined;
            } | undefined;
            blockIdFlag?: BlockIDFlag | undefined;
        }[] | undefined;
    } & {
        round?: number | undefined;
        votes?: ({
            validator?: {
                address?: Uint8Array | undefined;
                power?: bigint | undefined;
            } | undefined;
            blockIdFlag?: BlockIDFlag | undefined;
        }[] & ({
            validator?: {
                address?: Uint8Array | undefined;
                power?: bigint | undefined;
            } | undefined;
            blockIdFlag?: BlockIDFlag | undefined;
        } & {
            validator?: ({
                address?: Uint8Array | undefined;
                power?: bigint | undefined;
            } & {
                address?: Uint8Array | undefined;
                power?: bigint | undefined;
            } & Record<Exclude<keyof I["votes"][number]["validator"], keyof Validator>, never>) | undefined;
            blockIdFlag?: BlockIDFlag | undefined;
        } & Record<Exclude<keyof I["votes"][number], keyof VoteInfo>, never>)[] & Record<Exclude<keyof I["votes"], keyof {
            validator?: {
                address?: Uint8Array | undefined;
                power?: bigint | undefined;
            } | undefined;
            blockIdFlag?: BlockIDFlag | undefined;
        }[]>, never>) | undefined;
    } & Record<Exclude<keyof I, keyof CommitInfo>, never>>(object: I): CommitInfo;
};
export declare const ExtendedCommitInfo: {
    typeUrl: string;
    encode(message: ExtendedCommitInfo, writer?: BinaryWriter): BinaryWriter;
    decode(input: BinaryReader | Uint8Array, length?: number): ExtendedCommitInfo;
    fromJSON(object: any): ExtendedCommitInfo;
    toJSON(message: ExtendedCommitInfo): JsonSafe<ExtendedCommitInfo>;
    fromPartial<I extends {
        round?: number | undefined;
        votes?: {
            validator?: {
                address?: Uint8Array | undefined;
                power?: bigint | undefined;
            } | undefined;
            voteExtension?: Uint8Array | undefined;
            extensionSignature?: Uint8Array | undefined;
            blockIdFlag?: BlockIDFlag | undefined;
        }[] | undefined;
    } & {
        round?: number | undefined;
        votes?: ({
            validator?: {
                address?: Uint8Array | undefined;
                power?: bigint | undefined;
            } | undefined;
            voteExtension?: Uint8Array | undefined;
            extensionSignature?: Uint8Array | undefined;
            blockIdFlag?: BlockIDFlag | undefined;
        }[] & ({
            validator?: {
                address?: Uint8Array | undefined;
                power?: bigint | undefined;
            } | undefined;
            voteExtension?: Uint8Array | undefined;
            extensionSignature?: Uint8Array | undefined;
            blockIdFlag?: BlockIDFlag | undefined;
        } & {
            validator?: ({
                address?: Uint8Array | undefined;
                power?: bigint | undefined;
            } & {
                address?: Uint8Array | undefined;
                power?: bigint | undefined;
            } & Record<Exclude<keyof I["votes"][number]["validator"], keyof Validator>, never>) | undefined;
            voteExtension?: Uint8Array | undefined;
            extensionSignature?: Uint8Array | undefined;
            blockIdFlag?: BlockIDFlag | undefined;
        } & Record<Exclude<keyof I["votes"][number], keyof ExtendedVoteInfo>, never>)[] & Record<Exclude<keyof I["votes"], keyof {
            validator?: {
                address?: Uint8Array | undefined;
                power?: bigint | undefined;
            } | undefined;
            voteExtension?: Uint8Array | undefined;
            extensionSignature?: Uint8Array | undefined;
            blockIdFlag?: BlockIDFlag | undefined;
        }[]>, never>) | undefined;
    } & Record<Exclude<keyof I, keyof ExtendedCommitInfo>, never>>(object: I): ExtendedCommitInfo;
};
export declare const Event: {
    typeUrl: string;
    encode(message: Event, writer?: BinaryWriter): BinaryWriter;
    decode(input: BinaryReader | Uint8Array, length?: number): Event;
    fromJSON(object: any): Event;
    toJSON(message: Event): JsonSafe<Event>;
    fromPartial<I extends {
        type?: string | undefined;
        attributes?: {
            key?: string | undefined;
            value?: string | undefined;
            index?: boolean | undefined;
        }[] | undefined;
    } & {
        type?: string | undefined;
        attributes?: ({
            key?: string | undefined;
            value?: string | undefined;
            index?: boolean | undefined;
        }[] & ({
            key?: string | undefined;
            value?: string | undefined;
            index?: boolean | undefined;
        } & {
            key?: string | undefined;
            value?: string | undefined;
            index?: boolean | undefined;
        } & Record<Exclude<keyof I["attributes"][number], keyof EventAttribute>, never>)[] & Record<Exclude<keyof I["attributes"], keyof {
            key?: string | undefined;
            value?: string | undefined;
            index?: boolean | undefined;
        }[]>, never>) | undefined;
    } & Record<Exclude<keyof I, keyof Event>, never>>(object: I): Event;
};
export declare const EventAttribute: {
    typeUrl: string;
    encode(message: EventAttribute, writer?: BinaryWriter): BinaryWriter;
    decode(input: BinaryReader | Uint8Array, length?: number): EventAttribute;
    fromJSON(object: any): EventAttribute;
    toJSON(message: EventAttribute): JsonSafe<EventAttribute>;
    fromPartial<I extends {
        key?: string | undefined;
        value?: string | undefined;
        index?: boolean | undefined;
    } & {
        key?: string | undefined;
        value?: string | undefined;
        index?: boolean | undefined;
    } & Record<Exclude<keyof I, keyof EventAttribute>, never>>(object: I): EventAttribute;
};
export declare const ExecTxResult: {
    typeUrl: string;
    encode(message: ExecTxResult, writer?: BinaryWriter): BinaryWriter;
    decode(input: BinaryReader | Uint8Array, length?: number): ExecTxResult;
    fromJSON(object: any): ExecTxResult;
    toJSON(message: ExecTxResult): JsonSafe<ExecTxResult>;
    fromPartial<I extends {
        code?: number | undefined;
        data?: Uint8Array | undefined;
        log?: string | undefined;
        info?: string | undefined;
        gasWanted?: bigint | undefined;
        gasUsed?: bigint | undefined;
        events?: {
            type?: string | undefined;
            attributes?: {
                key?: string | undefined;
                value?: string | undefined;
                index?: boolean | undefined;
            }[] | undefined;
        }[] | undefined;
        codespace?: string | undefined;
    } & {
        code?: number | undefined;
        data?: Uint8Array | undefined;
        log?: string | undefined;
        info?: string | undefined;
        gasWanted?: bigint | undefined;
        gasUsed?: bigint | undefined;
        events?: ({
            type?: string | undefined;
            attributes?: {
                key?: string | undefined;
                value?: string | undefined;
                index?: boolean | undefined;
            }[] | undefined;
        }[] & ({
            type?: string | undefined;
            attributes?: {
                key?: string | undefined;
                value?: string | undefined;
                index?: boolean | undefined;
            }[] | undefined;
        } & {
            type?: string | undefined;
            attributes?: ({
                key?: string | undefined;
                value?: string | undefined;
                index?: boolean | undefined;
            }[] & ({
                key?: string | undefined;
                value?: string | undefined;
                index?: boolean | undefined;
            } & {
                key?: string | undefined;
                value?: string | undefined;
                index?: boolean | undefined;
            } & Record<Exclude<keyof I["events"][number]["attributes"][number], keyof EventAttribute>, never>)[] & Record<Exclude<keyof I["events"][number]["attributes"], keyof {
                key?: string | undefined;
                value?: string | undefined;
                index?: boolean | undefined;
            }[]>, never>) | undefined;
        } & Record<Exclude<keyof I["events"][number], keyof Event>, never>)[] & Record<Exclude<keyof I["events"], keyof {
            type?: string | undefined;
            attributes?: {
                key?: string | undefined;
                value?: string | undefined;
                index?: boolean | undefined;
            }[] | undefined;
        }[]>, never>) | undefined;
        codespace?: string | undefined;
    } & Record<Exclude<keyof I, keyof ExecTxResult>, never>>(object: I): ExecTxResult;
};
export declare const TxResult: {
    typeUrl: string;
    encode(message: TxResult, writer?: BinaryWriter): BinaryWriter;
    decode(input: BinaryReader | Uint8Array, length?: number): TxResult;
    fromJSON(object: any): TxResult;
    toJSON(message: TxResult): JsonSafe<TxResult>;
    fromPartial<I extends {
        height?: bigint | undefined;
        index?: number | undefined;
        tx?: Uint8Array | undefined;
        result?: {
            code?: number | undefined;
            data?: Uint8Array | undefined;
            log?: string | undefined;
            info?: string | undefined;
            gasWanted?: bigint | undefined;
            gasUsed?: bigint | undefined;
            events?: {
                type?: string | undefined;
                attributes?: {
                    key?: string | undefined;
                    value?: string | undefined;
                    index?: boolean | undefined;
                }[] | undefined;
            }[] | undefined;
            codespace?: string | undefined;
        } | undefined;
    } & {
        height?: bigint | undefined;
        index?: number | undefined;
        tx?: Uint8Array | undefined;
        result?: ({
            code?: number | undefined;
            data?: Uint8Array | undefined;
            log?: string | undefined;
            info?: string | undefined;
            gasWanted?: bigint | undefined;
            gasUsed?: bigint | undefined;
            events?: {
                type?: string | undefined;
                attributes?: {
                    key?: string | undefined;
                    value?: string | undefined;
                    index?: boolean | undefined;
                }[] | undefined;
            }[] | undefined;
            codespace?: string | undefined;
        } & {
            code?: number | undefined;
            data?: Uint8Array | undefined;
            log?: string | undefined;
            info?: string | undefined;
            gasWanted?: bigint | undefined;
            gasUsed?: bigint | undefined;
            events?: ({
                type?: string | undefined;
                attributes?: {
                    key?: string | undefined;
                    value?: string | undefined;
                    index?: boolean | undefined;
                }[] | undefined;
            }[] & ({
                type?: string | undefined;
                attributes?: {
                    key?: string | undefined;
                    value?: string | undefined;
                    index?: boolean | undefined;
                }[] | undefined;
            } & {
                type?: string | undefined;
                attributes?: ({
                    key?: string | undefined;
                    value?: string | undefined;
                    index?: boolean | undefined;
                }[] & ({
                    key?: string | undefined;
                    value?: string | undefined;
                    index?: boolean | undefined;
                } & {
                    key?: string | undefined;
                    value?: string | undefined;
                    index?: boolean | undefined;
                } & Record<Exclude<keyof I["result"]["events"][number]["attributes"][number], keyof EventAttribute>, never>)[] & Record<Exclude<keyof I["result"]["events"][number]["attributes"], keyof {
                    key?: string | undefined;
                    value?: string | undefined;
                    index?: boolean | undefined;
                }[]>, never>) | undefined;
            } & Record<Exclude<keyof I["result"]["events"][number], keyof Event>, never>)[] & Record<Exclude<keyof I["result"]["events"], keyof {
                type?: string | undefined;
                attributes?: {
                    key?: string | undefined;
                    value?: string | undefined;
                    index?: boolean | undefined;
                }[] | undefined;
            }[]>, never>) | undefined;
            codespace?: string | undefined;
        } & Record<Exclude<keyof I["result"], keyof ExecTxResult>, never>) | undefined;
    } & Record<Exclude<keyof I, keyof TxResult>, never>>(object: I): TxResult;
};
export declare const Validator: {
    typeUrl: string;
    encode(message: Validator, writer?: BinaryWriter): BinaryWriter;
    decode(input: BinaryReader | Uint8Array, length?: number): Validator;
    fromJSON(object: any): Validator;
    toJSON(message: Validator): JsonSafe<Validator>;
    fromPartial<I extends {
        address?: Uint8Array | undefined;
        power?: bigint | undefined;
    } & {
        address?: Uint8Array | undefined;
        power?: bigint | undefined;
    } & Record<Exclude<keyof I, keyof Validator>, never>>(object: I): Validator;
};
export declare const ValidatorUpdate: {
    typeUrl: string;
    encode(message: ValidatorUpdate, writer?: BinaryWriter): BinaryWriter;
    decode(input: BinaryReader | Uint8Array, length?: number): ValidatorUpdate;
    fromJSON(object: any): ValidatorUpdate;
    toJSON(message: ValidatorUpdate): JsonSafe<ValidatorUpdate>;
    fromPartial<I extends {
        pubKey?: {
            ed25519?: Uint8Array | undefined;
            secp256k1?: Uint8Array | undefined;
        } | undefined;
        power?: bigint | undefined;
    } & {
        pubKey?: ({
            ed25519?: Uint8Array | undefined;
            secp256k1?: Uint8Array | undefined;
        } & {
            ed25519?: Uint8Array | undefined;
            secp256k1?: Uint8Array | undefined;
        } & Record<Exclude<keyof I["pubKey"], keyof PublicKey>, never>) | undefined;
        power?: bigint | undefined;
    } & Record<Exclude<keyof I, keyof ValidatorUpdate>, never>>(object: I): ValidatorUpdate;
};
export declare const VoteInfo: {
    typeUrl: string;
    encode(message: VoteInfo, writer?: BinaryWriter): BinaryWriter;
    decode(input: BinaryReader | Uint8Array, length?: number): VoteInfo;
    fromJSON(object: any): VoteInfo;
    toJSON(message: VoteInfo): JsonSafe<VoteInfo>;
    fromPartial<I extends {
        validator?: {
            address?: Uint8Array | undefined;
            power?: bigint | undefined;
        } | undefined;
        blockIdFlag?: BlockIDFlag | undefined;
    } & {
        validator?: ({
            address?: Uint8Array | undefined;
            power?: bigint | undefined;
        } & {
            address?: Uint8Array | undefined;
            power?: bigint | undefined;
        } & Record<Exclude<keyof I["validator"], keyof Validator>, never>) | undefined;
        blockIdFlag?: BlockIDFlag | undefined;
    } & Record<Exclude<keyof I, keyof VoteInfo>, never>>(object: I): VoteInfo;
};
export declare const ExtendedVoteInfo: {
    typeUrl: string;
    encode(message: ExtendedVoteInfo, writer?: BinaryWriter): BinaryWriter;
    decode(input: BinaryReader | Uint8Array, length?: number): ExtendedVoteInfo;
    fromJSON(object: any): ExtendedVoteInfo;
    toJSON(message: ExtendedVoteInfo): JsonSafe<ExtendedVoteInfo>;
    fromPartial<I extends {
        validator?: {
            address?: Uint8Array | undefined;
            power?: bigint | undefined;
        } | undefined;
        voteExtension?: Uint8Array | undefined;
        extensionSignature?: Uint8Array | undefined;
        blockIdFlag?: BlockIDFlag | undefined;
    } & {
        validator?: ({
            address?: Uint8Array | undefined;
            power?: bigint | undefined;
        } & {
            address?: Uint8Array | undefined;
            power?: bigint | undefined;
        } & Record<Exclude<keyof I["validator"], keyof Validator>, never>) | undefined;
        voteExtension?: Uint8Array | undefined;
        extensionSignature?: Uint8Array | undefined;
        blockIdFlag?: BlockIDFlag | undefined;
    } & Record<Exclude<keyof I, keyof ExtendedVoteInfo>, never>>(object: I): ExtendedVoteInfo;
};
export declare const Misbehavior: {
    typeUrl: string;
    encode(message: Misbehavior, writer?: BinaryWriter): BinaryWriter;
    decode(input: BinaryReader | Uint8Array, length?: number): Misbehavior;
    fromJSON(object: any): Misbehavior;
    toJSON(message: Misbehavior): JsonSafe<Misbehavior>;
    fromPartial<I extends {
        type?: MisbehaviorType | undefined;
        validator?: {
            address?: Uint8Array | undefined;
            power?: bigint | undefined;
        } | undefined;
        height?: bigint | undefined;
        time?: {
            seconds?: bigint | undefined;
            nanos?: number | undefined;
        } | undefined;
        totalVotingPower?: bigint | undefined;
    } & {
        type?: MisbehaviorType | undefined;
        validator?: ({
            address?: Uint8Array | undefined;
            power?: bigint | undefined;
        } & {
            address?: Uint8Array | undefined;
            power?: bigint | undefined;
        } & Record<Exclude<keyof I["validator"], keyof Validator>, never>) | undefined;
        height?: bigint | undefined;
        time?: ({
            seconds?: bigint | undefined;
            nanos?: number | undefined;
        } & {
            seconds?: bigint | undefined;
            nanos?: number | undefined;
        } & Record<Exclude<keyof I["time"], keyof Timestamp>, never>) | undefined;
        totalVotingPower?: bigint | undefined;
    } & Record<Exclude<keyof I, keyof Misbehavior>, never>>(object: I): Misbehavior;
};
export declare const Snapshot: {
    typeUrl: string;
    encode(message: Snapshot, writer?: BinaryWriter): BinaryWriter;
    decode(input: BinaryReader | Uint8Array, length?: number): Snapshot;
    fromJSON(object: any): Snapshot;
    toJSON(message: Snapshot): JsonSafe<Snapshot>;
    fromPartial<I extends {
        height?: bigint | undefined;
        format?: number | undefined;
        chunks?: number | undefined;
        hash?: Uint8Array | undefined;
        metadata?: Uint8Array | undefined;
    } & {
        height?: bigint | undefined;
        format?: number | undefined;
        chunks?: number | undefined;
        hash?: Uint8Array | undefined;
        metadata?: Uint8Array | undefined;
    } & Record<Exclude<keyof I, keyof Snapshot>, never>>(object: I): Snapshot;
};
