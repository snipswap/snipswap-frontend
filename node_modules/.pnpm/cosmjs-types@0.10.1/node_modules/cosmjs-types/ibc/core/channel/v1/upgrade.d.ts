import { Timeout, Order } from "./channel";
import { BinaryReader, BinaryWriter } from "../../../../binary";
import { JsonSafe } from "../../../../json-safe";
export declare const protobufPackage = "ibc.core.channel.v1";
/**
 * Upgrade is a verifiable type which contains the relevant information
 * for an attempted upgrade. It provides the proposed changes to the channel
 * end, the timeout for this upgrade attempt and the next packet sequence
 * which allows the counterparty to efficiently know the highest sequence it has received.
 * The next sequence send is used for pruning and upgrading from unordered to ordered channels.
 */
export interface Upgrade {
    fields: UpgradeFields;
    timeout: Timeout;
    nextSequenceSend: bigint;
}
/**
 * UpgradeFields are the fields in a channel end which may be changed
 * during a channel upgrade.
 */
export interface UpgradeFields {
    ordering: Order;
    connectionHops: string[];
    version: string;
}
/**
 * ErrorReceipt defines a type which encapsulates the upgrade sequence and error associated with the
 * upgrade handshake failure. When a channel upgrade handshake is aborted both chains are expected to increment to the
 * next sequence.
 */
export interface ErrorReceipt {
    /** the channel upgrade sequence */
    sequence: bigint;
    /** the error message detailing the cause of failure */
    message: string;
}
export declare const Upgrade: {
    typeUrl: string;
    encode(message: Upgrade, writer?: BinaryWriter): BinaryWriter;
    decode(input: BinaryReader | Uint8Array, length?: number): Upgrade;
    fromJSON(object: any): Upgrade;
    toJSON(message: Upgrade): JsonSafe<Upgrade>;
    fromPartial<I extends {
        fields?: {
            ordering?: Order | undefined;
            connectionHops?: string[] | undefined;
            version?: string | undefined;
        } | undefined;
        timeout?: {
            height?: {
                revisionNumber?: bigint | undefined;
                revisionHeight?: bigint | undefined;
            } | undefined;
            timestamp?: bigint | undefined;
        } | undefined;
        nextSequenceSend?: bigint | undefined;
    } & {
        fields?: ({
            ordering?: Order | undefined;
            connectionHops?: string[] | undefined;
            version?: string | undefined;
        } & {
            ordering?: Order | undefined;
            connectionHops?: (string[] & string[] & Record<Exclude<keyof I["fields"]["connectionHops"], keyof string[]>, never>) | undefined;
            version?: string | undefined;
        } & Record<Exclude<keyof I["fields"], keyof UpgradeFields>, never>) | undefined;
        timeout?: ({
            height?: {
                revisionNumber?: bigint | undefined;
                revisionHeight?: bigint | undefined;
            } | undefined;
            timestamp?: bigint | undefined;
        } & {
            height?: ({
                revisionNumber?: bigint | undefined;
                revisionHeight?: bigint | undefined;
            } & {
                revisionNumber?: bigint | undefined;
                revisionHeight?: bigint | undefined;
            } & Record<Exclude<keyof I["timeout"]["height"], keyof import("../../client/v1/client").Height>, never>) | undefined;
            timestamp?: bigint | undefined;
        } & Record<Exclude<keyof I["timeout"], keyof Timeout>, never>) | undefined;
        nextSequenceSend?: bigint | undefined;
    } & Record<Exclude<keyof I, keyof Upgrade>, never>>(object: I): Upgrade;
};
export declare const UpgradeFields: {
    typeUrl: string;
    encode(message: UpgradeFields, writer?: BinaryWriter): BinaryWriter;
    decode(input: BinaryReader | Uint8Array, length?: number): UpgradeFields;
    fromJSON(object: any): UpgradeFields;
    toJSON(message: UpgradeFields): JsonSafe<UpgradeFields>;
    fromPartial<I extends {
        ordering?: Order | undefined;
        connectionHops?: string[] | undefined;
        version?: string | undefined;
    } & {
        ordering?: Order | undefined;
        connectionHops?: (string[] & string[] & Record<Exclude<keyof I["connectionHops"], keyof string[]>, never>) | undefined;
        version?: string | undefined;
    } & Record<Exclude<keyof I, keyof UpgradeFields>, never>>(object: I): UpgradeFields;
};
export declare const ErrorReceipt: {
    typeUrl: string;
    encode(message: ErrorReceipt, writer?: BinaryWriter): BinaryWriter;
    decode(input: BinaryReader | Uint8Array, length?: number): ErrorReceipt;
    fromJSON(object: any): ErrorReceipt;
    toJSON(message: ErrorReceipt): JsonSafe<ErrorReceipt>;
    fromPartial<I extends {
        sequence?: bigint | undefined;
        message?: string | undefined;
    } & {
        sequence?: bigint | undefined;
        message?: string | undefined;
    } & Record<Exclude<keyof I, keyof ErrorReceipt>, never>>(object: I): ErrorReceipt;
};
