"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Contract = exports.GenesisState = exports.protobufPackage = void 0;
/* eslint-disable */
const binary_1 = require("../../../../binary");
const helpers_1 = require("../../../../helpers");
exports.protobufPackage = "ibc.lightclients.wasm.v1";
function createBaseGenesisState() {
    return {
        contracts: [],
    };
}
exports.GenesisState = {
    typeUrl: "/ibc.lightclients.wasm.v1.GenesisState",
    encode(message, writer = binary_1.BinaryWriter.create()) {
        for (const v of message.contracts) {
            exports.Contract.encode(v, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof binary_1.BinaryReader ? input : new binary_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGenesisState();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.contracts.push(exports.Contract.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        const obj = createBaseGenesisState();
        if (Array.isArray(object?.contracts))
            obj.contracts = object.contracts.map((e) => exports.Contract.fromJSON(e));
        return obj;
    },
    toJSON(message) {
        const obj = {};
        if (message.contracts) {
            obj.contracts = message.contracts.map((e) => (e ? exports.Contract.toJSON(e) : undefined));
        }
        else {
            obj.contracts = [];
        }
        return obj;
    },
    fromPartial(object) {
        const message = createBaseGenesisState();
        message.contracts = object.contracts?.map((e) => exports.Contract.fromPartial(e)) || [];
        return message;
    },
};
function createBaseContract() {
    return {
        codeBytes: new Uint8Array(),
    };
}
exports.Contract = {
    typeUrl: "/ibc.lightclients.wasm.v1.Contract",
    encode(message, writer = binary_1.BinaryWriter.create()) {
        if (message.codeBytes.length !== 0) {
            writer.uint32(10).bytes(message.codeBytes);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof binary_1.BinaryReader ? input : new binary_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseContract();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.codeBytes = reader.bytes();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        const obj = createBaseContract();
        if ((0, helpers_1.isSet)(object.codeBytes))
            obj.codeBytes = (0, helpers_1.bytesFromBase64)(object.codeBytes);
        return obj;
    },
    toJSON(message) {
        const obj = {};
        message.codeBytes !== undefined &&
            (obj.codeBytes = (0, helpers_1.base64FromBytes)(message.codeBytes !== undefined ? message.codeBytes : new Uint8Array()));
        return obj;
    },
    fromPartial(object) {
        const message = createBaseContract();
        message.codeBytes = object.codeBytes ?? new Uint8Array();
        return message;
    },
};
//# sourceMappingURL=genesis.js.map