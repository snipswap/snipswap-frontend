import { PageRequest, PageResponse } from "../../../../cosmos/base/query/v1beta1/pagination";
import { BinaryReader, BinaryWriter } from "../../../../binary";
import { Rpc } from "../../../../helpers";
import { JsonSafe } from "../../../../json-safe";
export declare const protobufPackage = "ibc.lightclients.wasm.v1";
/** QueryChecksumsRequest is the request type for the Query/Checksums RPC method. */
export interface QueryChecksumsRequest {
    /** pagination defines an optional pagination for the request. */
    pagination?: PageRequest;
}
/** QueryChecksumsResponse is the response type for the Query/Checksums RPC method. */
export interface QueryChecksumsResponse {
    /** checksums is a list of the hex encoded checksums of all wasm codes stored. */
    checksums: string[];
    /** pagination defines the pagination in the response. */
    pagination?: PageResponse;
}
/** QueryCodeRequest is the request type for the Query/Code RPC method. */
export interface QueryCodeRequest {
    /** checksum is a hex encoded string of the code stored. */
    checksum: string;
}
/** QueryCodeResponse is the response type for the Query/Code RPC method. */
export interface QueryCodeResponse {
    data: Uint8Array;
}
export declare const QueryChecksumsRequest: {
    typeUrl: string;
    encode(message: QueryChecksumsRequest, writer?: BinaryWriter): BinaryWriter;
    decode(input: BinaryReader | Uint8Array, length?: number): QueryChecksumsRequest;
    fromJSON(object: any): QueryChecksumsRequest;
    toJSON(message: QueryChecksumsRequest): JsonSafe<QueryChecksumsRequest>;
    fromPartial<I extends {
        pagination?: {
            key?: Uint8Array | undefined;
            offset?: bigint | undefined;
            limit?: bigint | undefined;
            countTotal?: boolean | undefined;
            reverse?: boolean | undefined;
        } | undefined;
    } & {
        pagination?: ({
            key?: Uint8Array | undefined;
            offset?: bigint | undefined;
            limit?: bigint | undefined;
            countTotal?: boolean | undefined;
            reverse?: boolean | undefined;
        } & {
            key?: Uint8Array | undefined;
            offset?: bigint | undefined;
            limit?: bigint | undefined;
            countTotal?: boolean | undefined;
            reverse?: boolean | undefined;
        } & Record<Exclude<keyof I["pagination"], keyof PageRequest>, never>) | undefined;
    } & Record<Exclude<keyof I, "pagination">, never>>(object: I): QueryChecksumsRequest;
};
export declare const QueryChecksumsResponse: {
    typeUrl: string;
    encode(message: QueryChecksumsResponse, writer?: BinaryWriter): BinaryWriter;
    decode(input: BinaryReader | Uint8Array, length?: number): QueryChecksumsResponse;
    fromJSON(object: any): QueryChecksumsResponse;
    toJSON(message: QueryChecksumsResponse): JsonSafe<QueryChecksumsResponse>;
    fromPartial<I extends {
        checksums?: string[] | undefined;
        pagination?: {
            nextKey?: Uint8Array | undefined;
            total?: bigint | undefined;
        } | undefined;
    } & {
        checksums?: (string[] & string[] & Record<Exclude<keyof I["checksums"], keyof string[]>, never>) | undefined;
        pagination?: ({
            nextKey?: Uint8Array | undefined;
            total?: bigint | undefined;
        } & {
            nextKey?: Uint8Array | undefined;
            total?: bigint | undefined;
        } & Record<Exclude<keyof I["pagination"], keyof PageResponse>, never>) | undefined;
    } & Record<Exclude<keyof I, keyof QueryChecksumsResponse>, never>>(object: I): QueryChecksumsResponse;
};
export declare const QueryCodeRequest: {
    typeUrl: string;
    encode(message: QueryCodeRequest, writer?: BinaryWriter): BinaryWriter;
    decode(input: BinaryReader | Uint8Array, length?: number): QueryCodeRequest;
    fromJSON(object: any): QueryCodeRequest;
    toJSON(message: QueryCodeRequest): JsonSafe<QueryCodeRequest>;
    fromPartial<I extends {
        checksum?: string | undefined;
    } & {
        checksum?: string | undefined;
    } & Record<Exclude<keyof I, "checksum">, never>>(object: I): QueryCodeRequest;
};
export declare const QueryCodeResponse: {
    typeUrl: string;
    encode(message: QueryCodeResponse, writer?: BinaryWriter): BinaryWriter;
    decode(input: BinaryReader | Uint8Array, length?: number): QueryCodeResponse;
    fromJSON(object: any): QueryCodeResponse;
    toJSON(message: QueryCodeResponse): JsonSafe<QueryCodeResponse>;
    fromPartial<I extends {
        data?: Uint8Array | undefined;
    } & {
        data?: Uint8Array | undefined;
    } & Record<Exclude<keyof I, "data">, never>>(object: I): QueryCodeResponse;
};
/** Query service for wasm module */
export interface Query {
    /** Get all Wasm checksums */
    Checksums(request?: QueryChecksumsRequest): Promise<QueryChecksumsResponse>;
    /** Get Wasm code for given checksum */
    Code(request: QueryCodeRequest): Promise<QueryCodeResponse>;
}
export declare class QueryClientImpl implements Query {
    private readonly rpc;
    constructor(rpc: Rpc);
    Checksums(request?: QueryChecksumsRequest): Promise<QueryChecksumsResponse>;
    Code(request: QueryCodeRequest): Promise<QueryCodeResponse>;
}
