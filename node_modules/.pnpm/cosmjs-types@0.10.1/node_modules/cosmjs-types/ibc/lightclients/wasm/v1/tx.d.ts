import { BinaryReader, BinaryWriter } from "../../../../binary";
import { Rpc } from "../../../../helpers";
import { JsonSafe } from "../../../../json-safe";
export declare const protobufPackage = "ibc.lightclients.wasm.v1";
/** MsgStoreCode defines the request type for the StoreCode rpc. */
export interface MsgStoreCode {
    /** signer address */
    signer: string;
    /** wasm byte code of light client contract. It can be raw or gzip compressed */
    wasmByteCode: Uint8Array;
}
/** MsgStoreCodeResponse defines the response type for the StoreCode rpc */
export interface MsgStoreCodeResponse {
    /** checksum is the sha256 hash of the stored code */
    checksum: Uint8Array;
}
/** MsgRemoveChecksum defines the request type for the MsgRemoveChecksum rpc. */
export interface MsgRemoveChecksum {
    /** signer address */
    signer: string;
    /** checksum is the sha256 hash to be removed from the store */
    checksum: Uint8Array;
}
/** MsgStoreChecksumResponse defines the response type for the StoreCode rpc */
export interface MsgRemoveChecksumResponse {
}
/** MsgMigrateContract defines the request type for the MigrateContract rpc. */
export interface MsgMigrateContract {
    /** signer address */
    signer: string;
    /** the client id of the contract */
    clientId: string;
    /** checksum is the sha256 hash of the new wasm byte code for the contract */
    checksum: Uint8Array;
    /** the json encoded message to be passed to the contract on migration */
    msg: Uint8Array;
}
/** MsgMigrateContractResponse defines the response type for the MigrateContract rpc */
export interface MsgMigrateContractResponse {
}
export declare const MsgStoreCode: {
    typeUrl: string;
    encode(message: MsgStoreCode, writer?: BinaryWriter): BinaryWriter;
    decode(input: BinaryReader | Uint8Array, length?: number): MsgStoreCode;
    fromJSON(object: any): MsgStoreCode;
    toJSON(message: MsgStoreCode): JsonSafe<MsgStoreCode>;
    fromPartial<I extends {
        signer?: string | undefined;
        wasmByteCode?: Uint8Array | undefined;
    } & {
        signer?: string | undefined;
        wasmByteCode?: Uint8Array | undefined;
    } & Record<Exclude<keyof I, keyof MsgStoreCode>, never>>(object: I): MsgStoreCode;
};
export declare const MsgStoreCodeResponse: {
    typeUrl: string;
    encode(message: MsgStoreCodeResponse, writer?: BinaryWriter): BinaryWriter;
    decode(input: BinaryReader | Uint8Array, length?: number): MsgStoreCodeResponse;
    fromJSON(object: any): MsgStoreCodeResponse;
    toJSON(message: MsgStoreCodeResponse): JsonSafe<MsgStoreCodeResponse>;
    fromPartial<I extends {
        checksum?: Uint8Array | undefined;
    } & {
        checksum?: Uint8Array | undefined;
    } & Record<Exclude<keyof I, "checksum">, never>>(object: I): MsgStoreCodeResponse;
};
export declare const MsgRemoveChecksum: {
    typeUrl: string;
    encode(message: MsgRemoveChecksum, writer?: BinaryWriter): BinaryWriter;
    decode(input: BinaryReader | Uint8Array, length?: number): MsgRemoveChecksum;
    fromJSON(object: any): MsgRemoveChecksum;
    toJSON(message: MsgRemoveChecksum): JsonSafe<MsgRemoveChecksum>;
    fromPartial<I extends {
        signer?: string | undefined;
        checksum?: Uint8Array | undefined;
    } & {
        signer?: string | undefined;
        checksum?: Uint8Array | undefined;
    } & Record<Exclude<keyof I, keyof MsgRemoveChecksum>, never>>(object: I): MsgRemoveChecksum;
};
export declare const MsgRemoveChecksumResponse: {
    typeUrl: string;
    encode(_: MsgRemoveChecksumResponse, writer?: BinaryWriter): BinaryWriter;
    decode(input: BinaryReader | Uint8Array, length?: number): MsgRemoveChecksumResponse;
    fromJSON(_: any): MsgRemoveChecksumResponse;
    toJSON(_: MsgRemoveChecksumResponse): JsonSafe<MsgRemoveChecksumResponse>;
    fromPartial<I extends {} & {} & Record<Exclude<keyof I, never>, never>>(_: I): MsgRemoveChecksumResponse;
};
export declare const MsgMigrateContract: {
    typeUrl: string;
    encode(message: MsgMigrateContract, writer?: BinaryWriter): BinaryWriter;
    decode(input: BinaryReader | Uint8Array, length?: number): MsgMigrateContract;
    fromJSON(object: any): MsgMigrateContract;
    toJSON(message: MsgMigrateContract): JsonSafe<MsgMigrateContract>;
    fromPartial<I extends {
        signer?: string | undefined;
        clientId?: string | undefined;
        checksum?: Uint8Array | undefined;
        msg?: Uint8Array | undefined;
    } & {
        signer?: string | undefined;
        clientId?: string | undefined;
        checksum?: Uint8Array | undefined;
        msg?: Uint8Array | undefined;
    } & Record<Exclude<keyof I, keyof MsgMigrateContract>, never>>(object: I): MsgMigrateContract;
};
export declare const MsgMigrateContractResponse: {
    typeUrl: string;
    encode(_: MsgMigrateContractResponse, writer?: BinaryWriter): BinaryWriter;
    decode(input: BinaryReader | Uint8Array, length?: number): MsgMigrateContractResponse;
    fromJSON(_: any): MsgMigrateContractResponse;
    toJSON(_: MsgMigrateContractResponse): JsonSafe<MsgMigrateContractResponse>;
    fromPartial<I extends {} & {} & Record<Exclude<keyof I, never>, never>>(_: I): MsgMigrateContractResponse;
};
/** Msg defines the ibc/08-wasm Msg service. */
export interface Msg {
    /** StoreCode defines a rpc handler method for MsgStoreCode. */
    StoreCode(request: MsgStoreCode): Promise<MsgStoreCodeResponse>;
    /** RemoveChecksum defines a rpc handler method for MsgRemoveChecksum. */
    RemoveChecksum(request: MsgRemoveChecksum): Promise<MsgRemoveChecksumResponse>;
    /** MigrateContract defines a rpc handler method for MsgMigrateContract. */
    MigrateContract(request: MsgMigrateContract): Promise<MsgMigrateContractResponse>;
}
export declare class MsgClientImpl implements Msg {
    private readonly rpc;
    constructor(rpc: Rpc);
    StoreCode(request: MsgStoreCode): Promise<MsgStoreCodeResponse>;
    RemoveChecksum(request: MsgRemoveChecksum): Promise<MsgRemoveChecksumResponse>;
    MigrateContract(request: MsgMigrateContract): Promise<MsgMigrateContractResponse>;
}
