import { BinaryReader, BinaryWriter } from "../../../../binary";
import { JsonSafe } from "../../../../json-safe";
export declare const protobufPackage = "ibc.lightclients.wasm.v1";
/** GenesisState defines 08-wasm's keeper genesis state */
export interface GenesisState {
    /** uploaded light client wasm contracts */
    contracts: Contract[];
}
/** Contract stores contract code */
export interface Contract {
    /** contract byte code */
    codeBytes: Uint8Array;
}
export declare const GenesisState: {
    typeUrl: string;
    encode(message: GenesisState, writer?: BinaryWriter): BinaryWriter;
    decode(input: BinaryReader | Uint8Array, length?: number): GenesisState;
    fromJSON(object: any): GenesisState;
    toJSON(message: GenesisState): JsonSafe<GenesisState>;
    fromPartial<I extends {
        contracts?: {
            codeBytes?: Uint8Array | undefined;
        }[] | undefined;
    } & {
        contracts?: ({
            codeBytes?: Uint8Array | undefined;
        }[] & ({
            codeBytes?: Uint8Array | undefined;
        } & {
            codeBytes?: Uint8Array | undefined;
        } & Record<Exclude<keyof I["contracts"][number], "codeBytes">, never>)[] & Record<Exclude<keyof I["contracts"], keyof {
            codeBytes?: Uint8Array | undefined;
        }[]>, never>) | undefined;
    } & Record<Exclude<keyof I, "contracts">, never>>(object: I): GenesisState;
};
export declare const Contract: {
    typeUrl: string;
    encode(message: Contract, writer?: BinaryWriter): BinaryWriter;
    decode(input: BinaryReader | Uint8Array, length?: number): Contract;
    fromJSON(object: any): Contract;
    toJSON(message: Contract): JsonSafe<Contract>;
    fromPartial<I extends {
        codeBytes?: Uint8Array | undefined;
    } & {
        codeBytes?: Uint8Array | undefined;
    } & Record<Exclude<keyof I, "codeBytes">, never>>(object: I): Contract;
};
