import { Params, QueryRequest } from "./host";
import { BinaryReader, BinaryWriter } from "../../../../../binary";
import { Rpc } from "../../../../../helpers";
import { JsonSafe } from "../../../../../json-safe";
export declare const protobufPackage = "ibc.applications.interchain_accounts.host.v1";
/** MsgUpdateParams defines the payload for Msg/UpdateParams */
export interface MsgUpdateParams {
    /** signer address */
    signer: string;
    /**
     * params defines the 27-interchain-accounts/host parameters to update.
     *
     * NOTE: All parameters must be supplied.
     */
    params: Params;
}
/** MsgUpdateParamsResponse defines the response for Msg/UpdateParams */
export interface MsgUpdateParamsResponse {
}
/** MsgModuleQuerySafe defines the payload for Msg/ModuleQuerySafe */
export interface MsgModuleQuerySafe {
    /** signer address */
    signer: string;
    /** requests defines the module safe queries to execute. */
    requests: QueryRequest[];
}
/** MsgModuleQuerySafeResponse defines the response for Msg/ModuleQuerySafe */
export interface MsgModuleQuerySafeResponse {
    /** height at which the responses were queried */
    height: bigint;
    /** protobuf encoded responses for each query */
    responses: Uint8Array[];
}
export declare const MsgUpdateParams: {
    typeUrl: string;
    encode(message: MsgUpdateParams, writer?: BinaryWriter): BinaryWriter;
    decode(input: BinaryReader | Uint8Array, length?: number): MsgUpdateParams;
    fromJSON(object: any): MsgUpdateParams;
    toJSON(message: MsgUpdateParams): JsonSafe<MsgUpdateParams>;
    fromPartial<I extends {
        signer?: string | undefined;
        params?: {
            hostEnabled?: boolean | undefined;
            allowMessages?: string[] | undefined;
        } | undefined;
    } & {
        signer?: string | undefined;
        params?: ({
            hostEnabled?: boolean | undefined;
            allowMessages?: string[] | undefined;
        } & {
            hostEnabled?: boolean | undefined;
            allowMessages?: (string[] & string[] & Record<Exclude<keyof I["params"]["allowMessages"], keyof string[]>, never>) | undefined;
        } & Record<Exclude<keyof I["params"], keyof Params>, never>) | undefined;
    } & Record<Exclude<keyof I, keyof MsgUpdateParams>, never>>(object: I): MsgUpdateParams;
};
export declare const MsgUpdateParamsResponse: {
    typeUrl: string;
    encode(_: MsgUpdateParamsResponse, writer?: BinaryWriter): BinaryWriter;
    decode(input: BinaryReader | Uint8Array, length?: number): MsgUpdateParamsResponse;
    fromJSON(_: any): MsgUpdateParamsResponse;
    toJSON(_: MsgUpdateParamsResponse): JsonSafe<MsgUpdateParamsResponse>;
    fromPartial<I extends {} & {} & Record<Exclude<keyof I, never>, never>>(_: I): MsgUpdateParamsResponse;
};
export declare const MsgModuleQuerySafe: {
    typeUrl: string;
    encode(message: MsgModuleQuerySafe, writer?: BinaryWriter): BinaryWriter;
    decode(input: BinaryReader | Uint8Array, length?: number): MsgModuleQuerySafe;
    fromJSON(object: any): MsgModuleQuerySafe;
    toJSON(message: MsgModuleQuerySafe): JsonSafe<MsgModuleQuerySafe>;
    fromPartial<I extends {
        signer?: string | undefined;
        requests?: {
            path?: string | undefined;
            data?: Uint8Array | undefined;
        }[] | undefined;
    } & {
        signer?: string | undefined;
        requests?: ({
            path?: string | undefined;
            data?: Uint8Array | undefined;
        }[] & ({
            path?: string | undefined;
            data?: Uint8Array | undefined;
        } & {
            path?: string | undefined;
            data?: Uint8Array | undefined;
        } & Record<Exclude<keyof I["requests"][number], keyof QueryRequest>, never>)[] & Record<Exclude<keyof I["requests"], keyof {
            path?: string | undefined;
            data?: Uint8Array | undefined;
        }[]>, never>) | undefined;
    } & Record<Exclude<keyof I, keyof MsgModuleQuerySafe>, never>>(object: I): MsgModuleQuerySafe;
};
export declare const MsgModuleQuerySafeResponse: {
    typeUrl: string;
    encode(message: MsgModuleQuerySafeResponse, writer?: BinaryWriter): BinaryWriter;
    decode(input: BinaryReader | Uint8Array, length?: number): MsgModuleQuerySafeResponse;
    fromJSON(object: any): MsgModuleQuerySafeResponse;
    toJSON(message: MsgModuleQuerySafeResponse): JsonSafe<MsgModuleQuerySafeResponse>;
    fromPartial<I extends {
        height?: bigint | undefined;
        responses?: Uint8Array[] | undefined;
    } & {
        height?: bigint | undefined;
        responses?: (Uint8Array[] & Uint8Array[] & Record<Exclude<keyof I["responses"], keyof Uint8Array[]>, never>) | undefined;
    } & Record<Exclude<keyof I, keyof MsgModuleQuerySafeResponse>, never>>(object: I): MsgModuleQuerySafeResponse;
};
/** Msg defines the 27-interchain-accounts/host Msg service. */
export interface Msg {
    /** UpdateParams defines a rpc handler for MsgUpdateParams. */
    UpdateParams(request: MsgUpdateParams): Promise<MsgUpdateParamsResponse>;
    /** ModuleQuerySafe defines a rpc handler for MsgModuleQuerySafe. */
    ModuleQuerySafe(request: MsgModuleQuerySafe): Promise<MsgModuleQuerySafeResponse>;
}
export declare class MsgClientImpl implements Msg {
    private readonly rpc;
    constructor(rpc: Rpc);
    UpdateParams(request: MsgUpdateParams): Promise<MsgUpdateParamsResponse>;
    ModuleQuerySafe(request: MsgModuleQuerySafe): Promise<MsgModuleQuerySafeResponse>;
}
